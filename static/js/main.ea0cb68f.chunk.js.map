{"version":3,"sources":["Visualizer/Grid/Grid.module.css","logo.svg","Visualizer/Toolbar/Toolbar.js","Visualizer/Legend/Legend.js","Visualizer/algorithms/bfs.js","Visualizer/algorithms/GRAPH_CONSTANTS.js","Visualizer/algorithms/recursiveMaze.js","Visualizer/Grid/Grid.js","Visualizer/Grid/Helper.js","Visualizer/Visualizer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Toolbar","state","currentAlgorithm","currentAlgorithmKey","currentMaze","currentMazeKey","key","this","setState","props","algorithms","algorithmHandler","mazes","mazeHandler","className","style","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","aria-haspopup","aria-labelledby","map","algorithm","index","onClick","algorithmSelectorHandler","bind","maze","mazeSelectorHandler","Component","Legend","breadthFirstSearch","src","board","dst","currentCell","hashKey","console","log","result","queue","visualQueue","previous","r","c","push","length","shift","a","i","j","node","path","grid","row","getGrid","recursiveMaze","strKey","p","q","addToQueue","Math","random","generateMaze","Grid","populateDS","cells","x","createBoard","cellsLoaded","tdClickHandler","cellState","prevState","Object","assign","document","getElementById","cssClasses","obstruction","unvisited","selectAlgorithmHandler","selectMazeHandler","clearBoardHandler","leaveObstruction","updateCellState","cssClass","getRecursieMaze","JSON","parse","stringify","inter","setInterval","clearInterval","bfs","visited","pop","title","currentAlgrithmKey","nextProps","align","cell","onMouseDownCapture","onDrag","aria-hidden","Visualizer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ea0cb68f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"obstruction\":\"Grid_obstruction__3c8df\",\"obstructionAnimation\":\"Grid_obstructionAnimation__3R3KC\",\"visited\":\"Grid_visited__2vCE_\",\"visitedAnimation\":\"Grid_visitedAnimation__I_pqi\",\"path\":\"Grid_path__1mTV5\",\"pathAnimation\":\"Grid_pathAnimation__3Qfmm\",\"unvisited\":\"Grid_unvisited__3YPW8\"};","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react';\r\n\r\nexport default class Toolbar extends Component{\r\n    state={\r\n        currentAlgorithm:'',\r\n        currentAlgorithmKey:-1,\r\n        currentMaze:'',\r\n        currentMazeKey:-1\r\n    }\r\n    algorithmSelectorHandler(key)\r\n    {\r\n        this.setState({\r\n            currentAlgorithm:this.props.algorithms[key],\r\n            currentAlgorithmKey:key    \r\n        })\r\n        this.props.algorithmHandler(key);\r\n    }\r\n    mazeSelectorHandler(key)\r\n    {\r\n        this.setState({\r\n            ...this.state,\r\n            currentMaze:this.props.mazes[key],\r\n            currentMazeKey:key\r\n        })\r\n        this.props.mazeHandler(key);\r\n    }\r\n    render()\r\n    {\r\n        let background_color='primary-color';\r\n        return (\r\n<nav className={\"navbar navbar-expand-lg navbar-dark \"+background_color} style={{}}>\r\n\r\n  <a className=\"navbar-brand\" href=\"#\"><h2><b>Path-Finder</b></h2></a>\r\n\r\n  <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#basicExampleNav\"\r\n    aria-controls=\"basicExampleNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n    <span className=\"navbar-toggler-icon\"></span>\r\n  </button>\r\n\r\n  <div className=\"collapse navbar-collapse\" id=\"basicExampleNav\">\r\n\r\n    <ul className={\"navbar-nav mr-auto\"}>\r\n    <li className=\"nav-item dropdown\">\r\n        <a className=\"nav-link dropdown-toggle\" id=\"navbarDropdownMenuLink\" data-toggle=\"dropdown\"\r\n          aria-haspopup=\"true\" aria-expanded=\"false\">Algorithms</a>\r\n        <div className={\"dropdown-menu dropdown-primary\"+background_color} aria-labelledby=\"navbarDropdownMenuLink\">\r\n        {this.props.algorithms.map((algorithm,index)=>{return <a className=\"dropdown-item\" key={index} onClick={this.algorithmSelectorHandler.bind(this,index)}>{algorithm}</a>})}\r\n        </div>\r\n      </li>\r\n      <li className=\"nav-item dropdown\">\r\n        <a className=\"nav-link dropdown-toggle\" id=\"navbarDropdownMenuLink\" data-toggle=\"dropdown\"\r\n          aria-haspopup=\"true\" aria-expanded=\"false\">Mazes</a>\r\n        <div className=\"dropdown-menu dropdown-primary\" aria-labelledby=\"navbarDropdownMenuLink\">\r\n        {this.props.mazes.map((maze,index)=>{return <a className=\"dropdown-item\" key={index} onClick={this.mazeSelectorHandler.bind(this,index)}>{maze}</a>})}\r\n        </div>\r\n      </li>\r\n\r\n      <li className=\"nav-item\">\r\n        <button className=\"btn btn-sm btn-light-blue\" ><b>Visualize</b> {this.state.currentAlgorithm}</button>\r\n      </li>\r\n\r\n      <li className=\"nav-item\">\r\n        <a className=\"nav-link\" href=\"#\">clear board</a>\r\n      </li>\r\n      <li className=\"nav-item\">\r\n        <a className=\"nav-link\" href=\"#\">clear path</a>\r\n      </li>\r\n\r\n\r\n    </ul>\r\n\r\n\r\n</div>\r\n</nav>\r\n            );\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nclass Legend extends Component{\r\n    render()\r\n    {\r\n        return (\r\n            <div>\r\n                --\r\n        </div>        \r\n        );\r\n\r\n    }\r\n}\r\nexport default Legend;","import { VISITED,OBSTRUCTION,UNVISITED,PATH, MAX_COLUMN, MAX_ROW } from './GRAPH_CONSTANTS';\r\nexport function breadthFirstSearch(src,board,dst)\r\n{\r\n    console.log('src',src);\r\n    console.log('dst',dst);\r\n    console.log('board',board);\r\n    let currentCell,i,j,hashKey;\r\n    let queue=[];\r\n    let visualQueue=[];\r\n    let previous={};\r\n    let result=[];\r\n    let r=[-1,0,1,0]; //x,y x-1,y x+1,y x,y-1 x,y+1\r\n    let c=[0,-1,0,1];\r\n    console.log('src:',src);\r\n    console.log('dst:',dst);\r\n    console.log('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%')\r\n    queue.push(src);\r\n    var counter=0;\r\n    while(queue.length!=0)\r\n    {\r\n        currentCell=queue.shift();\r\n        if(currentCell.state===VISITED) continue;\r\n        if(currentCell.key===dst.key)\r\n        {\r\n            visualQueue.push(currentCell.key);\r\n            currentCell.state=VISITED;\r\n            break;\r\n        }\r\n        currentCell.state=VISITED;\r\n        //currentCell.className=cssClasses.visited;\r\n        visualQueue.push(currentCell.key);\r\n        for(let a=0;a<r.length;a++) //or c.length\r\n        {\r\n            i=currentCell.i+r[a];\r\n            j=currentCell.j+c[a];\r\n            hashKey=i+'-'+j;\r\n            if(board[hashKey] && board[hashKey].state===UNVISITED)\r\n            {\r\n                queue.push(board[hashKey]);\r\n                previous[hashKey]=currentCell.i+'-'+currentCell.j;\r\n            }\r\n        }\r\n    }\r\n    let node=dst.key;\r\n    let path=[];\r\n    while(1)\r\n    {\r\n        if(node)\r\n        {\r\n            path.push(node);\r\n            board[node].state=PATH;\r\n            node=previous[node];\r\n            console.log(node);\r\n            if(node===src.key)\r\n            {\r\n                path.push(node);\r\n                board[node].state=PATH;\r\n                break;\r\n            }\r\n        }\r\n        else break;\r\n    }\r\n    let grid=getGrid(board);\r\n    result=[visualQueue,path,grid];\r\n    console.log('path',path);\r\n    console.log('visualQueue',visualQueue);\r\n    return result;\r\n}\r\nfunction getGrid(board)\r\n{\r\n    let grid,row;\r\n    grid=[];\r\n    for(var i=0;i<MAX_ROW;i++)\r\n    {\r\n        row=[]\r\n        for(var j=0;j<MAX_COLUMN;j++)\r\n        {\r\n            row.push(board[i+'-'+j]);\r\n        }\r\n        grid.push(row);\r\n    }\r\n    return grid;\r\n}","const UNVISITED=0;\r\nconst VISITED=1;\r\nconst OBSTRUCTION=2\r\nconst VISITING=3;\r\nconst PATH=4\r\nconst MAX_ROW=20;\r\nconst MAX_COLUMN=50;\r\n\r\nexport { UNVISITED, VISITED, VISITING,OBSTRUCTION,MAX_COLUMN,MAX_ROW,PATH }","import { VISITED,OBSTRUCTION,UNVISITED, MAX_COLUMN,MAX_ROW } from './GRAPH_CONSTANTS';\r\nexport function recursiveMaze(board,src,dst)\r\n{\r\n    let strKey;\r\n    let currentCell,i,j,hashKey;\r\n    let queue=[];\r\n    let visualQueue=[];\r\n    // for(var x=0;x<MAX_ROW;x++) addToQueue(x,0,board,visualQueue);\r\n    // for(var y=0;y<MAX_COLUMN;y++) addToQueue(MAX_ROW-1,y,board,visualQueue);\r\n    // for(var x=MAX_ROW;x>=0;x--) addToQueue(x,MAX_COLUMN-1,board,visualQueue);\r\n    // for(var y=MAX_COLUMN-1;y>=0;y--) addToQueue(0,y,board,visualQueue);\r\n    for(var p=0;p<MAX_ROW;p++)\r\n    {\r\n        for(var q=0;q<MAX_COLUMN;q++)\r\n        {\r\n            if(p%2===0 && q%2===0)\r\n            {\r\n                strKey=p+'-'+q;\r\n                if(src.key===strKey || dst.key===strKey) continue;\r\n                //board[strKey].state=OBSTRUCTION\r\n                //board[strKey].className='cssClasses.obstruction';\r\n                addToQueue(p,q,board,visualQueue);\r\n            }\r\n        }\r\n    }    \r\n    generateMaze(board,visualQueue,src,dst);\r\n    let previous={};\r\n    let result=[];\r\n    let grid=getGrid(board);\r\n    let r=[1,0]; //x,y x-1,y x+1,y x,y-1 x,y+1\r\n    let c=[0,1];\r\n    result=[board,visualQueue,grid];\r\n    return result;\r\n}\r\nfunction addToQueue(i,j,board,visualQueue)\r\n{\r\nlet key=i+'-'+j;\r\nboard[key].state=OBSTRUCTION;\r\nvisualQueue.push(key);\r\n//board[key].className='cssClasses.obstruction';\r\n}\r\nfunction generateMaze(board,visualQueue,src,dst)\r\n{\r\nlet key,num;\r\nfor(var p=0;p<MAX_ROW;p++)\r\n{\r\n    for(var q=0;q<MAX_COLUMN;q++)\r\n    {\r\n        key=board[p+'-'+q];\r\n        if(src.key===key || dst.key===key) continue;\r\n        if(p%2==0 && q%2==0)\r\n        {\r\n            num=(Math.random()*10);\r\n            if(num>=5){\r\n                if(q+1<MAX_COLUMN) addToQueue(p,q+1,board,visualQueue);\r\n                num=(Math.random()*10);\r\n                if(num>=5){\r\n                    if(p+1<MAX_ROW) addToQueue(p+1,q,board,visualQueue);\r\n                }    \r\n            }\r\n            else\r\n            {\r\n                if(p+1<MAX_ROW) addToQueue(p+1,q,board,visualQueue);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n}\r\n\r\nfunction getGrid(board)\r\n{\r\n    let grid,row;\r\n    grid=[];\r\n    for(var i=0;i<MAX_ROW;i++)\r\n    {\r\n        row=[]\r\n        for(var j=0;j<MAX_COLUMN;j++)\r\n        {\r\n            row.push(board[i+'-'+j]);\r\n        }\r\n        grid.push(row);\r\n    }\r\n    return grid;\r\n}","import React, {Component} from 'react';\r\nimport cssClasses from './Grid.module.css';\r\nimport Toolbar from '../Toolbar/Toolbar';\r\nimport Legend from '../Legend/Legend';\r\nimport { UNVISITED,VISITED,PATH,VISITING,OBSTRUCTION,MAX_COLUMN,MAX_ROW } from './GRID_CONSTANTS';\r\nimport { breadthFirstSearch } from '../algorithms/bfs';\r\nimport { recursiveMaze } from '../algorithms/recursiveMaze';\r\nimport { createBoard } from './Helper';\r\nexport default class Grid extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={title: 'Dummy Algorithm',\r\n        currentAlgorithm:'',\r\n        currentAlgrithmKey:-1,\r\n        algorithms:['Breadth-First-Search','Depth-First-Search','Dijkstra'],\r\n        mazes:['A','B','C'],\r\n        cellsLoaded:false\r\n    };\r\n    }\r\n    componentDidMount(){\r\n        this.populateDS();\r\n    }\r\n    populateDS=()=>{\r\n        let result=createBoard();\r\n        let board,cells;\r\n        board=result[0];\r\n        cells=result[1];\r\n        this.setState({\r\n            ...this.state,\r\n            grid:board,\r\n            cells:cells,\r\n            src:board[0][0],\r\n            dst:board[5][5]\r\n        },()=>{\r\n            this.setState({\r\n                ...this.state,\r\n                cellsLoaded:true,\r\n                cells:cells\r\n            });\r\n        });\r\n    }\r\n    tdClickHandler=(key)=>{\r\n        if(key===this.state.src.key || key===this.state.dst.key) return;\r\n        let cellState=this.state.cells[key].state;\r\n        this.setState(prevState => {\r\n            let state = Object.assign({}, prevState);  // creating copy of state variable jasper\r\n                state.cells[key].state=cellState!==OBSTRUCTION?OBSTRUCTION:UNVISITED;                   // update the name property, assign a new value                 \r\n                //state.cells[key].className=cssClasses.obstruction;\r\n            return {state};\r\n        });\r\n        if(cellState!==OBSTRUCTION) document.getElementById(key).className=cssClasses.obstruction;\r\n        else document.getElementById(key).className=cssClasses.unvisited;\r\n    }\r\n    componentWillReceiveProps(nextProps) {\r\n        console.log('^^^^^^^^^%^^^^^^^^^^^^^^^^^^^^^^^^^');\r\n        this.setState({title: nextProps.title})\r\n      }\r\n\r\n    render()\r\n    {\r\n        return (\r\n            <div>\r\n        <Toolbar algorithms={this.state.algorithms} mazes={this.state.mazes} mazeHandler={this.selectMazeHandler} algorithmHandler={this.selectAlgorithmHandler} />\r\n        <Legend />\r\n        <div className=\"card card-block\">\r\n            <h4 className=\"card-title\"><b>title</b></h4>\r\n\r\n            <p className=\"card-text\">Some quick example text to build on the card title and make up the bulk of the card's content.</p>\r\n            <div className=\"flex-row\">\r\n            <table align='center'>\r\n                <thead>\r\n                <tr>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {this.state.cellsLoaded?this.state.grid.map((row,index)=>{\r\n                        return (\r\n                            <tr key={index}>\r\n                            {row.map((cell,index)=>{\r\n                                return (\r\n                                <td id={cell.key} key={cell.key} className={cell.state===UNVISITED?cssClasses.unvisited:cell.state===VISITED?cssClasses.visited:cell.state===OBSTRUCTION?cssClasses.obstruction:cell.state==PATH?cssClasses.path:null } onMouseDownCapture={this.tdClickHandler.bind(this,cell.key)}  onDrag={this.tdClickHandler.bind(this,cell.key)}>\r\n                                    {this.state.src.key===cell.key?<i className=\"fas fa-female\"></i>:null}\r\n                                    {this.state.dst.key===cell.key?<i className=\"fa fa-flag\"  aria-hidden=\"true\"></i>:null}</td>\r\n                                )\r\n                            })}\r\n\r\n                        </tr>\r\n                        );\r\n                    }):<tr><td>Loading</td></tr>}\r\n                </tbody>\r\n            </table>\r\n            <div>cfsd<button className=\"btn\" onClick={this.bfs}>Breadth First Search</button>\r\n            <button className='btn' onClick={this.clearBoardHandler.bind(this,false)}>clear</button>\r\n            <button className='btn' onClick={this.getRecursieMaze}>recursiveMaze</button>\r\n                </div>\r\n            </div>\r\n        </div>   \r\n        </div>     \r\n        );\r\n    }\r\n\r\n\r\n    selectAlgorithmHandler=(key)=>{\r\n        this.setState({\r\n            ...this.state,\r\n            currentAlgorithm:this.state.algorithms[key],\r\n            currentAlgorithmKey:key\r\n        });\r\n        \r\n    }\r\n    selectMazeHandler=(key)=>{\r\n        this.setState({\r\n            ...this.state,\r\n            currentMaze:this.state.mazes[key],\r\n            currentMazeKey:key\r\n        });\r\n    }\r\n    clearBoardHandler=(leaveObstruction)=>{\r\n        let key,grid,cells,row,x;\r\n        let board;\r\n        grid=[];\r\n        for(var i=0;i<MAX_ROW;i++)\r\n        {\r\n            row=[];\r\n            for(var j=0;j<MAX_COLUMN;j++)\r\n            {\r\n                document.getElementById(i+'-'+j).className=cssClasses.unvisited;\r\n                if(leaveObstruction)\r\n                {\r\n                    if(this.state.cells[i+'-'+j].state===OBSTRUCTION) \r\n                    {\r\n                        //console.log(i+'-'+j,'obstruction');\r\n                        this.setState(this.updateCellState(i+'-'+j,OBSTRUCTION,cssClasses.obstruction));\r\n                        document.getElementById(i+'-'+j).className=cssClasses.obstruction;\r\n                    }\r\n                    else \r\n                    {\r\n                        //console.log(i+'-'+j,'no-obstruction');\r\n                        this.setState(this.updateCellState(i+'-'+j,UNVISITED,cssClasses.unvisited));\r\n                    }\r\n                }\r\n                else this.setState(this.updateCellState(i+'-'+j,UNVISITED,cssClasses.unvisited));\r\n\r\n            }\r\n        }\r\n        console.log(this.state);\r\n    }\r\n    updateCellState=(key,cellState,cssClass)=>{\r\n        return (prevState)=>{\r\n            let state = Object.assign({}, prevState);  // creating copy of state variable jasper\r\n            state.cells[key].state=cellState;                   // update the name property, assign a new value                 \r\n            //state.cells[key].className=cssClass;\r\n            return {state};\r\n            }\r\n    }\r\n    getRecursieMaze=()=>\r\n    {\r\n        let currentCell;\r\n        this.clearBoardHandler(false);\r\n        let board=JSON.parse(JSON.stringify(this.state.cells));\r\n        let result=recursiveMaze(board,this.state.src,this.state.dst);\r\n        board=result[0];\r\n        let visualQueue=result[1];\r\n        let grid=result[2];\r\n        var inter=setInterval(()=>{\r\n            if(visualQueue.length===0)\r\n            {\r\n               this.setState({\r\n                    ...this.state,\r\n                    cells:board,\r\n                    src:board[this.state.src.key],\r\n                    dst:board[this.state.dst.key],\r\n                    grid:grid\r\n                },()=>{});\r\n                 \r\n                clearInterval(inter);\r\n            }\r\n            else{\r\n                currentCell=board[visualQueue.shift()];\r\n                //this.setState(updateState,afterUpdate);\r\n                document.getElementById(currentCell.key).className=cssClasses.obstruction;\r\n            }\r\n        },100);\r\n\r\n    }\r\n    bfs=()=>{\r\n        this.clearBoardHandler(true);\r\n        let board=JSON.parse(JSON.stringify(this.state.cells));\r\n        let src=board[this.state.src.key];\r\n        let dst=board[this.state.dst.key];\r\n        let currentCell,visualQueue,path,grid;\r\n        let result=breadthFirstSearch(src,board,dst);\r\n        visualQueue=JSON.parse(JSON.stringify(result[0]));\r\n        path=JSON.parse(JSON.stringify(result[1]));\r\n        grid=JSON.parse(JSON.stringify(result[2]));\r\n        //let stateCells=visualQueue.concat(path);\r\n        let afterUpdate=()=>{\r\n            // console.log('src',src);\r\n            // console.log('dst',dst);\r\n            // console.log('board',board);\r\n            // console.log('state',this.state);\r\n            // console.log('grid',grid);\r\n        }\r\n        var inter=setInterval(()=>{\r\n            if(visualQueue.length===0 && path.length===0) \r\n            {\r\n                // this.setState({\r\n                //     ...this.state,\r\n                //     cells:board,\r\n                //     src:board[src.key],\r\n                //     dst:board[dst.key],\r\n                //     grid:grid\r\n                // },afterUpdate);\r\n                clearInterval(inter);\r\n            }\r\n            else if(visualQueue.length!==0)\r\n            {\r\n                currentCell=board[visualQueue.shift()];\r\n                //this.setState(updateState,afterUpdate);\r\n                document.getElementById(currentCell.key).className=cssClasses.visited;\r\n            }\r\n            else\r\n            {\r\n                currentCell=board[path.pop()];\r\n                //this.setState(updateState,afterUpdate);\r\n                document.getElementById(currentCell.key).className=cssClasses.path;\r\n            }\r\n        },100);\r\n    }\r\n\r\n}","import React, {Component} from 'react';\r\nimport cssClasses from './Grid.module.css';\r\nimport { UNVISITED,MAX_COLUMN,MAX_ROW } from './GRID_CONSTANTS';\r\nexport function createBoard()\r\n{\r\n    let board=[];\r\n    let cells={};\r\n    let row,x;\r\n    for(let i=0;i<MAX_ROW;i++)\r\n    {\r\n        row=[];\r\n        for(let j=0;j<MAX_COLUMN;j++)\r\n        {\r\n            x={\r\n                i:i,\r\n                j:j,\r\n               state: UNVISITED,\r\n               key: i+'-'+j,\r\n               //className: 'cssClasses.unvisited'\r\n            };\r\n            cells[x.key]=x;\r\n            row.push(x);\r\n        }\r\n        board.push(row);\r\n    }\r\n    return [board,cells];\r\n}","import React, {Component} from 'react';\r\nimport Toolbar from './Toolbar/Toolbar'\r\nimport Grid from './Grid/Grid';\r\nexport default class Visualizer extends Component{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state={\r\n            currentAlgorithm:'',\r\n            currentAlgrithmKey:-1,\r\n            algorithms:['Breadth-First-Search','Depth-First-Search','Dijkstra'],\r\n            mazes:['A','B','C']                \r\n        };\r\n    }\r\n    render()\r\n    {\r\n        return (\r\n            <div>\r\n                <Grid />\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Visualizer from './Visualizer/Toolbar/Toolbar'\nimport Toolbar from './Visualizer/Visualizer';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Toolbar />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}