{"version":3,"sources":["Visualizer/Grid/Grid.module.css","logo.svg","Visualizer/Toolbar/Toolbar.js","Visualizer/Grid/Grid.js","Visualizer/Grid/GRID_CONSTANTS.js","Visualizer/Legend/Legend.js","Visualizer/Visualizer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Toolbar","state","currentAlgorithm","currentAlgorithmKey","currentMaze","currentMazeKey","key","this","setState","props","algorithms","algorithmHandler","mazes","mazeHandler","className","style","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","aria-haspopup","aria-labelledby","map","algorithm","index","onClick","algorithmSelectorHandler","bind","maze","mazeSelectorHandler","Component","Grid","populateDS","row","x","board","cells","i","j","push","grid","src","dst","cellsLoaded","console","log","tdClickHandler","prevState","Object","assign","cssClasses","obstruction","title","nextProps","align","cell","onMouseDownCapture","onDrag","class","aria-hidden","Legend","Visualizer","selectAlgorithmHandler","selectMazeHandler","currentAlgrithmKey","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.daf85c76.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"obstruction\":\"Grid_obstruction__3c8df\",\"obstructionAnimation\":\"Grid_obstructionAnimation__3R3KC\",\"unvisited\":\"Grid_unvisited__3YPW8\"};","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react';\r\n\r\nexport default class Toolbar extends Component{\r\n    state={\r\n        currentAlgorithm:'',\r\n        currentAlgorithmKey:-1,\r\n        currentMaze:'',\r\n        currentMazeKey:-1\r\n    }\r\n    algorithmSelectorHandler(key)\r\n    {\r\n        this.setState({\r\n            currentAlgorithm:this.props.algorithms[key],\r\n            currentAlgorithmKey:key    \r\n        })\r\n        this.props.algorithmHandler(key);\r\n    }\r\n    mazeSelectorHandler(key)\r\n    {\r\n        this.setState({\r\n            ...this.state,\r\n            currentMaze:this.props.mazes[key],\r\n            currentMazeKey:key\r\n        })\r\n        this.props.mazeHandler(key);\r\n    }\r\n    render()\r\n    {\r\n        let background_color='primary-color';\r\n        return (\r\n<nav className={\"navbar navbar-expand-lg navbar-dark \"+background_color} style={{}}>\r\n\r\n  <a className=\"navbar-brand\" href=\"#\"><h2><b>Path-Finder</b></h2></a>\r\n\r\n  <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#basicExampleNav\"\r\n    aria-controls=\"basicExampleNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n    <span className=\"navbar-toggler-icon\"></span>\r\n  </button>\r\n\r\n  <div className=\"collapse navbar-collapse\" id=\"basicExampleNav\">\r\n\r\n    <ul className={\"navbar-nav mr-auto\"}>\r\n    <li className=\"nav-item dropdown\">\r\n        <a className=\"nav-link dropdown-toggle\" id=\"navbarDropdownMenuLink\" data-toggle=\"dropdown\"\r\n          aria-haspopup=\"true\" aria-expanded=\"false\">Algorithms</a>\r\n        <div className={\"dropdown-menu dropdown-primary\"+background_color} aria-labelledby=\"navbarDropdownMenuLink\">\r\n        {this.props.algorithms.map((algorithm,index)=>{return <a className=\"dropdown-item\" key={index} onClick={this.algorithmSelectorHandler.bind(this,index)}>{algorithm}</a>})}\r\n        </div>\r\n      </li>\r\n      <li className=\"nav-item dropdown\">\r\n        <a className=\"nav-link dropdown-toggle\" id=\"navbarDropdownMenuLink\" data-toggle=\"dropdown\"\r\n          aria-haspopup=\"true\" aria-expanded=\"false\">Mazes</a>\r\n        <div className=\"dropdown-menu dropdown-primary\" aria-labelledby=\"navbarDropdownMenuLink\">\r\n        {this.props.mazes.map((maze,index)=>{return <a className=\"dropdown-item\" key={index} onClick={this.mazeSelectorHandler.bind(this,index)}>{maze}</a>})}\r\n        </div>\r\n      </li>\r\n\r\n      <li className=\"nav-item\">\r\n        <button className=\"btn btn-sm btn-light-blue\" ><b>Visualize</b> {this.state.currentAlgorithm}</button>\r\n      </li>\r\n\r\n      <li className=\"nav-item\">\r\n        <a className=\"nav-link\" href=\"#\">clear board</a>\r\n      </li>\r\n      <li className=\"nav-item\">\r\n        <a className=\"nav-link\" href=\"#\">clear path</a>\r\n      </li>\r\n\r\n\r\n    </ul>\r\n\r\n\r\n</div>\r\n</nav>\r\n            );\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport cssClasses from './Grid.module.css';\r\nimport { UNVISITED,VISITED,VISITING,OBSTRUCTION } from './GRID_CONSTANTS';\r\nexport default class Grid extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        console.log(\"Grid Component Got created\");\r\n        this.state={title: 'Dummy Algorithm',\r\n        cellsLoaded:false\r\n    };\r\n    }\r\n    componentDidMount(){\r\n        console.log('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%');\r\n        this.populateDS();\r\n        console.log('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%');    \r\n    }\r\n    populateDS=()=>{\r\n        let board=[];\r\n        let cells={};\r\n        let row,x;\r\n        for(let i=0;i<20;i++)\r\n        {\r\n            row=[];\r\n            for(let j=0;j<50;j++)\r\n            {\r\n                x={\r\n                   state: UNVISITED,\r\n                   key: i+'-'+j,\r\n                   className: 'cssClasses.unvisited'\r\n                };\r\n                cells[x.key]=x;\r\n                row.push(x);\r\n            }\r\n            board.push(row);\r\n        }\r\n        this.setState({\r\n            ...this.state,\r\n            grid:board,\r\n            cells:cells,\r\n            src:board[3][5],\r\n            dst:board[9][19]\r\n        },()=>{\r\n            this.setState({\r\n                ...this.state,\r\n                cellsLoaded:true,\r\n                cells:cells\r\n            });\r\n            console.log(this.state);\r\n        });\r\n    }\r\n    tdClickHandler=(key)=>{\r\n        console.log(key);        \r\n        if(key==this.state.src.key || key==this.state.dst.key) return;\r\n        this.setState(prevState => {\r\n            //console.log(\"grid\");\r\n            let state = Object.assign({}, prevState);  // creating copy of state variable jasper\r\n            console.log(state.cells[key].state,'sdc',OBSTRUCTION);\r\n                state.cells[key].state=OBSTRUCTION;                   // update the name property, assign a new value                 \r\n                state.cells[key].className=cssClasses.obstruction;\r\n            return {state};\r\n        });\r\n    }\r\n    componentWillReceiveProps(nextProps) {\r\n        console.log('^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^');\r\n        this.setState({title: nextProps.title})\r\n      }\r\n\r\n    render()\r\n    {\r\n        const {title}=this.props;\r\n        return (\r\n        <div className=\"card card-block\">\r\n            <h4 className=\"card-title\"><b>title</b></h4>\r\n\r\n            <p className=\"card-text\">Some quick example text to build on the card title and make up the bulk of the card's content.</p>\r\n            <div className=\"flex-row\">\r\n            <table align='center'>\r\n                <thead>\r\n                <tr>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {this.state.cellsLoaded?this.state.grid.map((row,index)=>{\r\n                        return (\r\n                            <tr key={index}>\r\n                            {row.map((cell,index)=>{\r\n                                return (\r\n                                <td key={cell.key} className={cell.className} onMouseDownCapture={this.tdClickHandler.bind(this,cell.key)}  onDrag={this.tdClickHandler.bind(this,cell.key)}>\r\n                                    {this.state.src.key==cell.key?<i class=\"fas fa-male\"></i>:null}\r\n                                    {this.state.dst.key==cell.key?<i class=\"fa fa-flag\"  aria-hidden=\"true\"></i>:null}</td>\r\n                                )\r\n                            })}\r\n\r\n                        </tr>\r\n                        );\r\n                    }):<tr><td>Loading</td></tr>}\r\n                </tbody>\r\n            </table>\r\n            <div>cfsd\r\n                </div>\r\n            </div>\r\n        </div>        \r\n        );\r\n    }\r\n}","const UNVISITED=0;\r\nconst VISITED=1;\r\nconst OBSTRUCTION=2\r\nconst VISITING=3;\r\n\r\nexport { UNVISITED, VISITED, VISITING,OBSTRUCTION }","import React, { Component } from 'react';\r\n\r\nclass Legend extends Component{\r\n    render()\r\n    {\r\n        return (\r\n            <div>\r\n                --\r\n        </div>        \r\n        );\r\n\r\n    }\r\n}\r\nexport default Legend;","import React, {Component} from 'react';\r\nimport Toolbar from './Toolbar/Toolbar'\r\nimport Grid from './Grid/Grid';\r\nimport Legend from './Legend/Legend';\r\nexport default class Visualizer extends Component{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state={\r\n            currentAlgorithm:'',\r\n            currentAlgrithmKey:-1,\r\n            algorithms:['Breadth-First-Search','Depth-First-Search','Dijkstra'],\r\n            mazes:['A','B','C']                \r\n        };\r\n    }\r\n    selectAlgorithmHandler=(key)=>{\r\n        this.setState({\r\n            ...this.state,\r\n            currentAlgorithm:this.state.algorithms[key],\r\n            currentAlgorithmKey:key\r\n        });\r\n    }\r\n    selectMazeHandler=(key)=>{\r\n        this.setState({\r\n            ...this.state,\r\n            currentMaze:this.state.mazes[key],\r\n            currentMazeKey:key\r\n        });\r\n    }\r\n    render()\r\n    {\r\n        return (\r\n            <div>\r\n                <Toolbar algorithms={this.state.algorithms} mazes={this.state.mazes} mazeHandler={this.selectMazeHandler} algorithmHandler={this.selectAlgorithmHandler} />\r\n                <Legend />\r\n                <Grid title={this.state.currentAlgorithm} />\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Visualizer from './Visualizer/Toolbar/Toolbar'\nimport Toolbar from './Visualizer/Visualizer';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Toolbar />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}