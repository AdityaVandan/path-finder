{"version":3,"sources":["Visualizer/Grid/Grid.module.css","logo.svg","Visualizer/algorithms/GRAPH_CONSTANTS.js","Visualizer/Toolbar/Toolbar.js","Visualizer/NavigationBar/NavigationBar.js","Visualizer/Legend/Legend.js","Visualizer/algorithms/bfs.js","Visualizer/algorithms/Utility/utility.js","Visualizer/algorithms/dijkstraSearch.js","Visualizer/algorithms/Utility/PriorityQueue.js","Visualizer/algorithms/bestFirstSearch.js","Visualizer/algorithms/bestFirstSearchWeighted.js","Visualizer/algorithms/recursiveDivisionMaze.js","Visualizer/algorithms/recursiveMaze.js","Visualizer/algorithms/dfsMaze.js","Visualizer/algorithms/randomObstructionMaze.js","Visualizer/Grid/Helper.js","Visualizer/Grid/Grid.js","Visualizer/algorithms/dfs.js","Visualizer/Visualizer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MAZE","Toolbar","state","currentAlgorithm","currentAlgorithmKey","currentMaze","currentMazeKey","setStart","startX","document","getElementById","startY","value","alert","props","setEnd","endX","endY","key","this","setState","algorithms","algorithmHandler","mazes","mazeHandler","className","data-toggle","type","aria-haspopup","aria-expanded","disabled","disableAll","map","algorithm","index","style","color","onClick","bind","visualize","clear","role","aria-label","id","aria-labelledby","maze","mazeSelectorHandler","tabIndex","aria-hidden","data-dismiss","placeholder","min","max","width","height","htmlFor","toggleWeights","Component","NavigationBar","href","breadthFirstSearch","src","board","dst","currentCell","hashKey","queue","visualQueue","previous","r","c","push","length","shift","a","i","j","node","path","grid","row","getGrid","dijkstraSearch","weightsBoard","pathWeight","result","neighbour","pq","PriorityQueue","b","isEmpty","pop","console","log","Infinity","parent","left","right","comparator","_heap","_comparator","size","values","forEach","_siftUp","poppedValue","peek","bottom","_swap","_siftDown","replacedValue","_greater","maxChild","bestFirstSearch","heuristics","z","bestFirstSearchWeighted","heuristic","recursiveDivisonMaze","visited","generateVisited","minI","minJ","maxI","maxJ","mid","x","addToQueue","y","MAX_ROW","MAX_COLUMN","currentNode","stack","Math","floor","randomNumber","createVertical","createHorizontal","dfs","hole","random","recursiveMaze","p","q","generateMaze","dfsMaze","steps","visit","splice","isValid","vi","vj","indexI","indexJ","maxR","maxC","randomObstructionMaze","createBoard","cells","createWeightBoard","weightBoard","Grid","populateDS","cellsLoaded","setters","start","settter","setSrc","end","setter","setDst","tdClickHandler","cellState","prevState","Object","assign","cssClasses","obstruction","unvisited","clearBoardHandler","visualizeSelectedAlgorithmHandler","algorithmFunctions","selectAlgorithmHandler","selectMazeHandler","mazeFunctions","leaveObstruction","updateCellState","cssClass","getRecursiveMaze","newBoard","inter","setInterval","clearInterval","getRandomObstructionMaze","getRecursiveDivisionMaze","getDFSMaze","bfs","JSON","parse","stringify","depthFirstSearch","weightsSet","createWeights","destroyWeights","dijstra","weights","createEmptyWeightBoard","aStar","abs","greedyBFS","swarm","title","nextProps","align","rIndex","cell","cIndex","onMouseDownCapture","onDrag","Visualizer","currentAlgrithmKey","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b7e7ed2b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"obstruction\":\"Grid_obstruction__3c8df\",\"obstructionAnimation\":\"Grid_obstructionAnimation__3R3KC\",\"visited\":\"Grid_visited__2vCE_\",\"visitedAnimation\":\"Grid_visitedAnimation__I_pqi\",\"path\":\"Grid_path__1mTV5\",\"pathAnimation\":\"Grid_pathAnimation__3Qfmm\",\"unvisited\":\"Grid_unvisited__3YPW8\"};","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","const UNVISITED=0;\r\nconst VISITED=1;\r\nconst OBSTRUCTION=2\r\nconst VISITING=3;\r\nconst PATH=4\r\nconst SRC_VISITED=5;\r\nconst DST_VISITED=6;\r\n// const MAX_ROW=20;\r\n// const MAX_COLUMN=50;\r\nconst MAX_ROW=21;\r\nconst MAX_COLUMN=55;\r\nconst startX=10;\r\nconst startY=10;\r\nconst endX=40;\r\nconst endY=10;\r\nconst MAZE={\r\n    x:10,\r\n    y:26\r\n};\r\nconst MAZE_SPEED=50;\r\nconst SEARCH_SPEED=100;\r\nexport { UNVISITED, VISITED, VISITING,OBSTRUCTION,MAX_COLUMN,MAX_ROW,PATH,startX,startY,endX,endY,MAZE,SEARCH_SPEED,MAZE_SPEED,SRC_VISITED,DST_VISITED}","import React, {Component} from 'react';\r\nimport {startX,startY,endX,endY, MAX_ROW,MAX_COLUMN} from '../algorithms/GRAPH_CONSTANTS'\r\nexport default class Toolbar extends Component{\r\n    state={\r\n        currentAlgorithm:'',\r\n        currentAlgorithmKey:-1,\r\n        currentMaze:'',\r\n        currentMazeKey:-1\r\n    }\r\n    componentDidMount(){\r\n      document.getElementById('startX').value=startX;\r\n      document.getElementById('startY').value=startY;\r\n      document.getElementById('endX').value=endX;\r\n      document.getElementById('endY').value=endY;\r\n\r\n    }\r\n\r\n    algorithmSelectorHandler(key)\r\n    {\r\n        this.setState({\r\n            currentAlgorithm:this.props.algorithms[key],\r\n            currentAlgorithmKey:key    \r\n        })\r\n        this.props.algorithmHandler(key);\r\n    }\r\n    mazeSelectorHandler(key)\r\n    {\r\n        this.setState({\r\n            ...this.state,\r\n            currentMaze:this.props.mazes[key],\r\n            currentMazeKey:key\r\n        })\r\n        this.props.mazeHandler(key);\r\n    }\r\n    setStart=()=>{\r\n      let startX=document.getElementById('startX');\r\n      let startY=document.getElementById('startY');\r\n      if(startX.value=='' || startY.value==''){\r\n        alert('Please enter a valid x/y coordinate');\r\n        return;\r\n      }\r\n      if(startX.value<0 || startX.value>=MAX_COLUMN || startY.value<0 || startY.value>=MAX_ROW){\r\n        alert('index out of bounds. Please put a valid index');\r\n        return;\r\n      }\r\n      this.props.setStart(startY.value,startX.value);\r\n    }\r\n    setEnd=()=>{\r\n      let endX=document.getElementById('endX');\r\n      let endY=document.getElementById('endY');\r\n      if(endX.value=='' || endY.value==''){\r\n        alert('Please enter a valid x/y coordinate');\r\n        return;\r\n      }\r\n      if(endX.value<0 || endX.value>=MAX_COLUMN || endY.value<0 || endY.value>=MAX_ROW){\r\n        alert('index out of bounds. Please put a valid index');\r\n        return;\r\n      }\r\n      this.props.setEnd(endY.value,endX.value);\r\n    }\r\n    render()\r\n    {\r\n      let setters=[{placeholder:'start',onClick:this.setStart},{placeholder:'end',onClick:this.setEnd}]\r\n      return (\r\n          <div>\r\n            <div className=\"btn-group btn-group-toggle\" data-toggle=\"buttons\">\r\n            {/* <button type=\"button\" className=\"btn btn-secondary btn-lg\" data-toggle=\"modal\" data-target=\"#modalPush\" disabled={this.props.disableAll}>set start/end</button> */}\r\n            <div className=\"btn-group btn-group-toggle\" data-toggle=\"buttons\">\r\n              <button className=\"btn btn-primary dropdown-toggle mr-4 btn-lg\" type=\"button\" data-toggle=\"dropdown\"\r\n              aria-haspopup=\"true\" aria-expanded=\"false\" disabled={this.props.disableAll}>Algorithm: {this.props.currentAlgorithm}</button>\r\n\r\n            <div className=\"dropdown-menu\">\r\n              {this.props.algorithms.map((algorithm,index)=>{\r\n                return (\r\n                  <a className=\"dropdown-item\" key={algorithm+'-'+index} style={{color: index%2==0?'blue':'green'}} onClick={this.props.algorithmHandler.bind(this,index)}>{algorithm}</a>\r\n                      \r\n                )\r\n              })}\r\n              </div>\r\n\r\n\r\n\r\n              <button type=\"button\" className=\"btn btn-success btn-lg\" onClick={this.props.visualize} disabled={this.props.disableAll}>Visualize</button>\r\n\r\n            </div>\r\n\r\n            <button type=\"button\" className=\"btn bt-lg\" onClick={this.props.clear.bind(this,false)} disabled={this.props.disableAll}>clear</button>\r\n\r\n            </div>\r\n\r\n\r\n\r\n\r\n          <div className=\"btn-group\" role=\"group\" aria-label=\"Button group with nested dropdown\">\r\n          <div className=\"btn-group\" role=\"group\">\r\n            <button id=\"btnGroupDrop1\" type=\"button\" className=\"btn btn-info dropdown-toggle btn-lg\" data-toggle=\"dropdown\"\r\n              aria-haspopup=\"true\" aria-expanded=\"false\" disabled={this.props.disableAll}>\r\n              Maze algorithms\r\n            </button>\r\n            <div className=\"dropdown-menu\" aria-labelledby=\"btnGroupDrop1\">\r\n            { this.props.mazes.map((maze,index)=>{return  (<a className=\"dropdown-item\" style={{color: index%2==0?'blue':'green'}} key={maze} onClick={this.mazeSelectorHandler.bind(this,index)}>{maze}</a>)})  }\r\n            </div>\r\n\r\n          </div>\r\n        </div>\r\n\r\n\r\n<div className=\"modal fade\" id=\"modalPush\" tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\"\r\n  aria-hidden=\"true\">\r\n  <div className=\"modal-dialog modal-notify modal-info\" role=\"document\">\r\n\r\n\r\n    <div className=\"modal-content text-center\">\r\n      <div className=\"modal-header d-flex justify-content-center\">\r\n        <p className=\"heading\">Be always up to date</p>\r\n      </div>\r\n\r\n      <div className=\"modal-body\">\r\n\r\n\r\n        <p>Do you want to receive the push notification about the newest posts?</p>\r\n\r\n      </div>\r\n\r\n      <div className=\"modal-footer flex-center\">\r\n        <button type='button' className=\"btn btn-info\" data-dismiss=\"modal\">Done</button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n\r\n\r\n<br />\r\n<br />\r\n<div className='flex-center'>\r\n            <form>\r\n        <div className=\"row\">\r\n          <div className=\"col\">\r\n            <div className=\"md-form mt-0\">\r\n            <input placeholder=\"x\" type=\"number\" id=\"startX\" min=\"1\" max=\"999\" style={{width:'50px',height:'50px'}} className=\"form-control\" />\r\n                  <label htmlFor=\"startX\">Start X</label>\r\n            </div>\r\n          </div>\r\n          <div className=\"col\">\r\n            <div className=\"md-form mt-0\">\r\n            <input placeholder=\"y\" type=\"number\" id=\"startY\" style={{width:'50px',height:'50px'}} className=\"form-control\" disabled={this.props.disableAll} />\r\n                  <label htmlFor=\"startY\">Start Y</label>\r\n            </div>\r\n          </div>\r\n          <div className=\"col\">\r\n            <div className=\"md-form mt-0\">\r\n            <button className='btn' type='button' onClick={this.setStart} disabled={this.props.disableAll}>set</button>\r\n            </div>\r\n          </div>\r\n          <div className=\"col\">\r\n            <div className=\"md-form mt-0\">\r\n            <input placeholder=\"x\" type=\"number\" id=\"endX\" style={{width:'50px',height:'50px'}} className=\"form-control\" />\r\n                  <label htmlFor=\"endX\">End X</label>\r\n            </div>\r\n          </div>\r\n          <div className=\"col\">\r\n            <div className=\"md-form mt-0\">\r\n            <input placeholder=\"y\" type=\"number\" id=\"endY\" style={{width:'50px',height:'50px'}} className=\"form-control\" />\r\n                  <label htmlFor=\"endY\">End Y</label>\r\n            </div>\r\n          </div>\r\n          <div className=\"col\">\r\n            <div className=\"md-form mt-0\">\r\n            <button className='btn' type=\"button\" onClick={this.setEnd} disabled={this.props.disableAll}>set</button>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"col\">\r\n            <div className=\"md-form mt-0\">\r\n            </div>\r\n          </div>\r\n\r\n\r\n          <div className=\"col\">\r\n            <div className=\"md-form mt-0\">\r\n            <div className=\"custom-control custom-switch\">\r\n        <input type=\"checkbox\" className=\"custom-control-input\" id=\"customSwitches\" onClick={this.props.toggleWeights} />\r\n        <label className=\"custom-control-label\" htmlFor=\"customSwitches\">Weight</label>\r\n      </div>\r\n\r\n            </div>\r\n          </div>\r\n\r\n\r\n\r\n          </div>\r\n\r\n\r\n\r\n      </form>\r\n      </div>\r\n\r\n\r\n\r\n\r\n\r\n          </div>\r\n        );\r\n    }\r\n}","import React, {Component} from 'react';\r\n\r\nexport default class NavigationBar extends Component{\r\n    state={\r\n        currentAlgorithm:'',\r\n        currentAlgorithmKey:-1,\r\n        currentMaze:'',\r\n        currentMazeKey:-1\r\n    }\r\n    algorithmSelectorHandler(key)\r\n    {\r\n        this.setState({\r\n            currentAlgorithm:this.props.algorithms[key],\r\n            currentAlgorithmKey:key    \r\n        })\r\n        this.props.algorithmHandler(key);\r\n    }\r\n    mazeSelectorHandler(key)\r\n    {\r\n        this.setState({\r\n            ...this.state,\r\n            currentMaze:this.props.mazes[key],\r\n            currentMazeKey:key\r\n        })\r\n        this.props.mazeHandler(key);\r\n    }\r\n    render()\r\n    {\r\n        let background_color='primary-color';\r\n        return (\r\n<nav className={\"navbar justify-content-center navbar-expand-lg navbar-dark \"+background_color} style={{}}>\r\n\r\n  <a className=\"navbar-brand\" href=\"#\"><h1><b><i className=\"fas fa-route\" style={{color:'green'}}></i> Path-Finder</b></h1></a>\r\n\r\n</nav>\r\n            );\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nclass Legend extends Component{\r\n    render()\r\n    {\r\n        return (\r\n            <div>\r\n                --\r\n        </div>        \r\n        );\r\n\r\n    }\r\n}\r\nexport default Legend;","import { VISITED,OBSTRUCTION,UNVISITED,PATH, MAX_COLUMN, MAX_ROW } from './GRAPH_CONSTANTS';\r\nexport function breadthFirstSearch(src,board,dst)\r\n{\r\n    // console.log('src',src);\r\n    // console.log('dst',dst);\r\n    // console.log('board',board);\r\n    let currentCell,i,j,hashKey;\r\n    let queue=[];\r\n    let visualQueue=[];\r\n    let previous={};\r\n    let result=[];\r\n    let r=[-1,0,1,0]; //x,y x-1,y x+1,y x,y-1 x,y+1\r\n    let c=[0,-1,0,1];\r\n    // console.log('src:',src);\r\n    // console.log('dst:',dst);\r\n    // console.log('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%')\r\n    queue.push(src);\r\n    while(queue.length!=0)\r\n    {\r\n        currentCell=queue.shift();\r\n        if(currentCell.state===VISITED) continue;\r\n        if(currentCell.key===dst.key)\r\n        {\r\n            visualQueue.push(currentCell.key);\r\n            currentCell.state=VISITED;\r\n            break;\r\n        }\r\n        currentCell.state=VISITED;\r\n        //currentCell.className=cssClasses.visited;\r\n        visualQueue.push(currentCell.key);\r\n        for(let a=0;a<r.length;a++) //or c.length\r\n        {\r\n            i=currentCell.i+r[a];\r\n            j=currentCell.j+c[a];\r\n            hashKey=i+'-'+j;\r\n            if(board[hashKey] && board[hashKey].state===UNVISITED)\r\n            {\r\n                queue.push(board[hashKey]);\r\n                previous[hashKey]=currentCell.i+'-'+currentCell.j;\r\n            }\r\n        }\r\n    }\r\n    let node=dst.key;\r\n    let path=[];\r\n    while(1)\r\n    {\r\n        if(node)\r\n        {\r\n            path.push(node);\r\n            board[node].state=PATH;\r\n            node=previous[node];\r\n            // console.log(node);\r\n            if(node===src.key)\r\n            {\r\n                path.push(node);\r\n                board[node].state=PATH;\r\n                break;\r\n            }\r\n        }\r\n        else break;\r\n    }\r\n    let grid=getGrid(board);\r\n    result=[visualQueue,path,grid];\r\n    // console.log('path',path);\r\n    // console.log('visualQueue',visualQueue);\r\n    return result;\r\n}\r\nfunction getGrid(board)\r\n{\r\n    let grid,row;\r\n    grid=[];\r\n    for(var i=0;i<MAX_ROW;i++)\r\n    {\r\n        row=[]\r\n        for(var j=0;j<MAX_COLUMN;j++)\r\n        {\r\n            row.push(board[i+'-'+j]);\r\n        }\r\n        grid.push(row);\r\n    }\r\n    return grid;\r\n}","import { VISITED,OBSTRUCTION,UNVISITED,PATH, MAX_COLUMN, MAX_ROW } from '../GRAPH_CONSTANTS';\r\nexport function getGrid(board)\r\n{\r\n    let grid,row;\r\n    grid=[];\r\n    for(var i=0;i<MAX_ROW;i++)\r\n    {\r\n        row=[]\r\n        for(var j=0;j<MAX_COLUMN;j++)\r\n        {\r\n            row.push(board[i+'-'+j]);\r\n        }\r\n        grid.push(row);\r\n    }\r\n    return grid;\r\n}\r\n//export default getGrid;","import { VISITED,OBSTRUCTION,UNVISITED,PATH, MAX_COLUMN, MAX_ROW } from './GRAPH_CONSTANTS';\r\n//import { PriorityQueue } from './Utility/PriorityQueue';\r\nimport { getGrid } from './Utility/utility';\r\nexport function dijkstraSearch(src,board,dst,weightsBoard)\r\n{\r\nconst pq=new PriorityQueue((a,b)=>{return a[0]<b[0]});\r\n// console.log('src',src);\r\n// console.log('dst',dst);\r\n// console.log('board',board);\r\nlet currentCell,i,j,hashKey,pathWeight,weight;\r\nlet visualQueue=[];\r\nlet previous={};\r\nlet next={};\r\nlet result=[];\r\nlet weights={};\r\nlet visited={};\r\n\r\nlet grid=getGrid(board);\r\n\r\nlet neighbour;\r\nlet r=[-1,0,1,0]; //x,y x-1,y x+1,y x,y-1 x,y+1\r\nlet c=[0,-1,0,1];\r\n// console.log('src:',src);\r\n// console.log('dst:',dst);\r\n// console.log('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%')\r\npq.push([0,src]);\r\n\r\n\r\nwhile(!pq.isEmpty())\r\n{\r\n    currentCell=pq.pop();\r\n    //visited[currentCell.i+'-'+currentCell.j]\r\n    if(currentCell[1].state==VISITED) continue;\r\n    currentCell[1].state=VISITED;\r\n    visualQueue.push(currentCell[1].key);\r\n    //weights[currentCell.i+'-'+currentCell.j]=currentCell;\r\n    if(currentCell[1].key==dst.key) break;\r\n    for(let a=0;a<r.length;a++){ // or c.length\r\n        i=currentCell[1].i+r[a];\r\n        j=currentCell[1].j+c[a];\r\n        //console.log('grid error',currentCell[1].i+r[a]);\r\n        if(i<0 || i>=MAX_ROW || j<0 || j>=MAX_COLUMN) continue;\r\n        neighbour=grid[currentCell[1].i+r[a]][currentCell[1].j+c[a]];\r\n        if(!neighbour)\r\n        {\r\n          console.log('error:',currentCell[1].i+r[a],currentCell[1].j+c[a]);\r\n          //continue;\r\n        }\r\n        if(neighbour.state==VISITED || neighbour.state==OBSTRUCTION) continue;\r\n        pathWeight=currentCell[0]+weightsBoard[neighbour.i][neighbour.j]\r\n        pq.push([pathWeight,neighbour]);\r\n        weight=previous[neighbour.key]?previous[neighbour.key][0]:Infinity;\r\n        if(weight>pathWeight) previous[neighbour.key]=[pathWeight,currentCell[1].key];\r\n    }\r\n\r\n}\r\n\r\nconsole.log(previous);\r\n\r\nlet node=dst.key;\r\nlet path=[];\r\nwhile(1)\r\n{\r\n    if(node)\r\n    {\r\n        path.push(node);\r\n        board[node].state=PATH;\r\n        if(!previous[node]) break;\r\n        node=previous[node][1];\r\n        console.log(node);\r\n        if(node===src.key)\r\n        {\r\n            path.push(node);\r\n            board[node].state=PATH;\r\n            break;\r\n        }\r\n    }\r\n    else break;\r\n}\r\n\r\n\r\n\r\nresult=[visualQueue,path,grid];\r\nconsole.log('path',path);\r\nconsole.log('visualQueue',visualQueue);\r\nreturn result;\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst top = 0;\r\nconst parent = i => ((i + 1) >>> 1) - 1;\r\nconst left = i => (i << 1) + 1;\r\nconst right = i => (i + 1) << 1;\r\n\r\nexport default class PriorityQueue {\r\n  constructor(comparator = (a, b) => a > b) {\r\n    this._heap = [];\r\n    this._comparator = comparator;\r\n  }\r\n  size() {\r\n    return this._heap.length;\r\n  }\r\n  isEmpty() {\r\n    return this.size() == 0;\r\n  }\r\n  peek() {\r\n    return this._heap[top];\r\n  }\r\n  push(...values) {\r\n    values.forEach(value => {\r\n      this._heap.push(value);\r\n      this._siftUp();\r\n    });\r\n    return this.size();\r\n  }\r\n  pop() {\r\n    const poppedValue = this.peek();\r\n    const bottom = this.size() - 1;\r\n    if (bottom > top) {\r\n      this._swap(top, bottom);\r\n    }\r\n    this._heap.pop();\r\n    this._siftDown();\r\n    return poppedValue;\r\n  }\r\n  replace(value) {\r\n    const replacedValue = this.peek();\r\n    this._heap[top] = value;\r\n    this._siftDown();\r\n    return replacedValue;\r\n  }\r\n  _greater(i, j) {\r\n    return this._comparator(this._heap[i], this._heap[j]);\r\n  }\r\n  _swap(i, j) {\r\n    [this._heap[i], this._heap[j]] = [this._heap[j], this._heap[i]];\r\n  }\r\n  _siftUp() {\r\n    let node = this.size() - 1;\r\n    while (node > top && this._greater(node, parent(node))) {\r\n      this._swap(node, parent(node));\r\n      node = parent(node);\r\n    }\r\n  }\r\n  _siftDown() {\r\n    let node = top;\r\n    while (\r\n      (left(node) < this.size() && this._greater(left(node), node)) ||\r\n      (right(node) < this.size() && this._greater(right(node), node))\r\n    ) {\r\n      let maxChild = (right(node) < this.size() && this._greater(right(node), left(node))) ? right(node) : left(node);\r\n      this._swap(node, maxChild);\r\n      node = maxChild;\r\n    }\r\n  }\r\n}","const top = 0;\r\nconst parent = i => ((i + 1) >>> 1) - 1;\r\nconst left = i => (i << 1) + 1;\r\nconst right = i => (i + 1) << 1;\r\n\r\nexport default class PriorityQueue {\r\n  constructor(comparator = (a, b) => a > b) {\r\n    this._heap = [];\r\n    this._comparator = comparator;\r\n  }\r\n  size() {\r\n    return this._heap.length;\r\n  }\r\n  isEmpty() {\r\n    return this.size() == 0;\r\n  }\r\n  peek() {\r\n    return this._heap[top];\r\n  }\r\n  push(...values) {\r\n    values.forEach(value => {\r\n      this._heap.push(value);\r\n      this._siftUp();\r\n    });\r\n    return this.size();\r\n  }\r\n  pop() {\r\n    const poppedValue = this.peek();\r\n    const bottom = this.size() - 1;\r\n    if (bottom > top) {\r\n      this._swap(top, bottom);\r\n    }\r\n    this._heap.pop();\r\n    this._siftDown();\r\n    return poppedValue;\r\n  }\r\n  replace(value) {\r\n    const replacedValue = this.peek();\r\n    this._heap[top] = value;\r\n    this._siftDown();\r\n    return replacedValue;\r\n  }\r\n  _greater(i, j) {\r\n    return this._comparator(this._heap[i], this._heap[j]);\r\n  }\r\n  _swap(i, j) {\r\n    [this._heap[i], this._heap[j]] = [this._heap[j], this._heap[i]];\r\n  }\r\n  _siftUp() {\r\n    let node = this.size() - 1;\r\n    while (node > top && this._greater(node, parent(node))) {\r\n      this._swap(node, parent(node));\r\n      node = parent(node);\r\n    }\r\n  }\r\n  _siftDown() {\r\n    let node = top;\r\n    while (\r\n      (left(node) < this.size() && this._greater(left(node), node)) ||\r\n      (right(node) < this.size() && this._greater(right(node), node))\r\n    ) {\r\n      let maxChild = (right(node) < this.size() && this._greater(right(node), left(node))) ? right(node) : left(node);\r\n      this._swap(node, maxChild);\r\n      node = maxChild;\r\n    }\r\n  }\r\n}","import { VISITED,OBSTRUCTION,UNVISITED,PATH, MAX_COLUMN, MAX_ROW } from './GRAPH_CONSTANTS';\r\nimport PriorityQueue from './Utility/PriorityQueue';\r\nexport function bestFirstSearch(src,board,dst,heuristics)\r\n{\r\n    // console.log('src',src);\r\n    // console.log('dst',dst);\r\n    // console.log('board',board);\r\n    let z,currentCell,i,j,hashKey;\r\n    let queue=new PriorityQueue((a,b)=>{return a[0]<b[0];});\r\n    let visualQueue=[];\r\n    let previous={};\r\n    let result=[];\r\n    let r=[-1,0,1,0]; //x,y x-1,y x+1,y x,y-1 x,y+1\r\n    let c=[0,-1,0,1];\r\n    // console.log('src:',src);\r\n    // console.log('dst:',dst);\r\n    // console.log('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%')\r\n    queue.push([heuristics[src.i][src.j],src]);\r\n    while(!queue.isEmpty())\r\n    {\r\n        z=queue.pop();\r\n        // if(!z)\r\n        // {\r\n        //     console.log(queue.length())\r\n        //     continue;\r\n        // }\r\n        console.log(z);\r\n        currentCell=z[1];\r\n        if(currentCell.state===VISITED) continue;\r\n        if(currentCell.key===dst.key)\r\n        {\r\n            visualQueue.push(currentCell.key);\r\n            currentCell.state=VISITED;\r\n            break;\r\n        }\r\n        currentCell.state=VISITED;\r\n        //currentCell.className=cssClasses.visited;\r\n        visualQueue.push(currentCell.key);\r\n        for(let a=0;a<r.length;a++) //or c.length\r\n        {\r\n            i=currentCell.i+r[a];\r\n            j=currentCell.j+c[a];\r\n            hashKey=i+'-'+j;\r\n            if(board[hashKey] && board[hashKey].state===UNVISITED)\r\n            {\r\n                // console.log('null path error:','previous:'+i+'-'+j,'current:'+hashKey,'cell:'+board[hashKey],'weight'+heuristics[i][j]);\r\n                queue.push([heuristics[i][j],board[hashKey]]);\r\n                previous[hashKey]=currentCell.i+'-'+currentCell.j;\r\n            }\r\n        }\r\n    }\r\n    let node=dst.key;\r\n    let path=[];\r\n    while(1)\r\n    {\r\n        if(node)\r\n        {\r\n            path.push(node);\r\n            board[node].state=PATH;\r\n            if(!previous[node]) break;\r\n            node=previous[node];\r\n            // console.log(node);\r\n            if(node===src.key)\r\n            {\r\n                path.push(node);\r\n                board[node].state=PATH;\r\n                break;\r\n            }\r\n        }\r\n        else break;\r\n    }\r\n    let grid=getGrid(board);\r\n    result=[visualQueue,path,grid];\r\n    // console.log('path',path);\r\n    // console.log('visualQueue',visualQueue);\r\n    return result;\r\n}\r\nfunction getGrid(board)\r\n{\r\n    let grid,row;\r\n    grid=[];\r\n    for(var i=0;i<MAX_ROW;i++)\r\n    {\r\n        row=[]\r\n        for(var j=0;j<MAX_COLUMN;j++)\r\n        {\r\n            row.push(board[i+'-'+j]);\r\n        }\r\n        grid.push(row);\r\n    }\r\n    return grid;\r\n}","import { VISITED,OBSTRUCTION,UNVISITED,PATH, MAX_COLUMN, MAX_ROW } from './GRAPH_CONSTANTS';\r\nimport PriorityQueue from './Utility/PriorityQueue';\r\nimport { getGrid } from './Utility/utility';\r\nexport function bestFirstSearchWeighted(src,board,dst,weightsBoard,heuristic)\r\n{\r\nconst pq=new PriorityQueue((a,b)=>{return a[0]<b[0]});\r\nconsole.log('src',src);\r\nconsole.log('dst',dst);\r\nconsole.log('board',board);\r\nlet currentCell,i,j,hashKey,pathWeight,weight;\r\nlet visualQueue=[];\r\nlet previous={};\r\nlet next={};\r\nlet result=[];\r\nlet weights={};\r\nlet visited={};\r\n\r\nlet grid=getGrid(board);\r\n\r\nlet neighbour;\r\nlet r=[-1,0,1,0]; //x,y x-1,y x+1,y x,y-1 x,y+1\r\nlet c=[0,-1,0,1];\r\nconsole.log('src:',src);\r\nconsole.log('dst:',dst);\r\nconsole.log('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%')\r\npq.push([weightsBoard[src.i][src.j]+heuristic[src.i][src.j],src,heuristic[src.i][src.j]]);\r\n\r\n\r\nwhile(!pq.isEmpty())\r\n{\r\n    currentCell=pq.pop();\r\n    //visited[currentCell.i+'-'+currentCell.j]\r\n    if(currentCell[1].state==VISITED) continue;\r\n    currentCell[1].state=VISITED;\r\n    visualQueue.push(currentCell[1].key);\r\n    //weights[currentCell.i+'-'+currentCell.j]=currentCell;\r\n    if(currentCell[1].key==dst.key) break;\r\n    for(let a=0;a<r.length;a++){ // or c.length\r\n        i=currentCell[1].i+r[a];\r\n        j=currentCell[1].j+c[a];\r\n        //console.log('grid error',currentCell[1].i+r[a]);\r\n        if(i<0 || i>=MAX_ROW || j<0 || j>=MAX_COLUMN) continue;\r\n        neighbour=grid[currentCell[1].i+r[a]][currentCell[1].j+c[a]];\r\n        if(neighbour.state==VISITED || neighbour.state==OBSTRUCTION) continue;\r\n        pathWeight=currentCell[2]+weightsBoard[neighbour.i][neighbour.j]\r\n        pq.push([pathWeight+heuristic[neighbour.i][neighbour.j],neighbour,pathWeight]);\r\n        weight=previous[neighbour.key]?previous[neighbour.key][0]:Infinity;\r\n        if(weight>pathWeight) previous[neighbour.key]=[pathWeight,currentCell[1].key];\r\n    }\r\n\r\n}\r\n\r\nconsole.log(previous);\r\n\r\nlet node=dst.key;\r\nlet path=[];\r\nwhile(1)\r\n{\r\n    if(node)\r\n    {\r\n        path.push(node);\r\n        board[node].state=PATH;\r\n        if(!previous[node]) break;\r\n        node=previous[node][1];\r\n        console.log(node);\r\n        if(node===src.key)\r\n        {\r\n            path.push(node);\r\n            board[node].state=PATH;\r\n            break;\r\n        }\r\n    }\r\n    else break;\r\n}\r\n\r\n\r\n\r\nresult=[visualQueue,path,grid];\r\nconsole.log('path',path);\r\nconsole.log('visualQueue',visualQueue);\r\nreturn result;\r\n}","import { VISITED,OBSTRUCTION,UNVISITED, MAX_COLUMN,MAX_ROW, MAZE } from './GRAPH_CONSTANTS';\r\nexport function recursiveDivisonMaze(board,src,dst)\r\n{\r\nlet grid=getGrid(board);\r\nlet visited=generateVisited();\r\nlet visualQueue;\r\n//visited[src.i][src.j]=true;\r\n//visited[dst.i][dst.j]=true;\r\n\r\nvisualQueue=dfs(board,MAZE.x,MAZE.y,visited,src,dst);\r\nlet result=[board,visualQueue,grid];\r\nreturn result;\r\n}\r\nfunction dfs(board,i,j,visited,src,dst)\r\n{\r\n    let visualQueue=[];\r\n    for(var x=0;x<MAX_ROW;x++) addToQueue(x,0,board,visualQueue,src,dst);\r\n    for(var y=0;y<MAX_COLUMN;y++) addToQueue(MAX_ROW-1,y,board,visualQueue,src,dst);\r\n    for(var x=MAX_ROW-1;x>=0;x--) addToQueue(x,MAX_COLUMN-1,board,visualQueue,src,dst);\r\n    for(var y=MAX_COLUMN-1;y>=0;y--) addToQueue(0,y,board,visualQueue,src,dst);    \r\n    let minI,minJ,maxI,maxJ,mid,mid1,mid2,opening;\r\n    minJ=minI=2;\r\n    maxI=MAX_ROW-2-1;\r\n    maxJ=MAX_COLUMN-2-1;\r\n    let stack=[];\r\n    stack.push([minI,minJ,maxI,maxJ,true]);\r\n    //addToQueue(i,j,board,visualQueue,src,dst)\r\n    visited[i][j]=true;\r\n    let currentNode,counter;\r\n    counter=0;\r\n    while(stack.length!=0)\r\n    {\r\n        //if(counter==10) break; \r\n        //counter++;\r\n        if(stack.length==100) break;\r\n        currentNode=stack.pop();\r\n        minI=currentNode[0];\r\n        minJ=currentNode[1];\r\n        maxI=currentNode[2];\r\n        maxJ=currentNode[3];\r\n        console.log('currentNode:',currentNode);\r\n        if(currentNode[4]){\r\n            if(maxI-minI<2) continue;\r\n            mid=Math.floor(randomNumber(minJ, maxJ)/2)*2;\r\n            createVertical(minI,maxI,mid,board,visualQueue,src,dst);\r\n            stack.push([minI,minJ,maxI,mid-1,!currentNode[4]]);\r\n            stack.push([minI,mid+1,maxI,maxJ,!currentNode[4]]);\r\n        }\r\n        else{\r\n            if(maxJ-minJ<2) continue;\r\n            mid=Math.floor(randomNumber(minI,maxI)/2)*2;\r\n            createHorizontal(minJ,maxJ,mid,board,visualQueue,src,dst);\r\n            stack.push([minI,minJ,mid-1,maxJ,!currentNode[4]]);\r\n            stack.push([mid+1,minJ,maxI,maxJ,!currentNode[4]]);\r\n        }\r\n    \r\n    }\r\n    return visualQueue;\r\n}\r\nfunction createHorizontal(minJ,maxJ,mid,board,visualQueue,src,dst)\r\n{\r\n    let hole=Math.floor(randomNumber(minJ,maxJ)/2)*2+1;\r\n    for(var x=minJ;x<=maxJ;x++){\r\n        if(x==hole) continue;\r\n        else addToQueue(mid,x,board,visualQueue,src,dst);\r\n    }\r\n}\r\nfunction createVertical(minI,maxI,mid,board,visualQueue,src,dst){\r\n    let hole=Math.floor(randomNumber(minI,maxI)/2)*2+1;\r\n    for(var x=minI;x<=maxI;x++){\r\n        if(x==hole) continue;\r\n        else addToQueue(x,mid,board,visualQueue,src,dst);\r\n    }\r\n}\r\n\r\n\r\nfunction addToQueue(i,j,board,visualQueue,src,dst)\r\n{\r\nif((i==src.i && j==src.j) || (i==dst.i && j==dst.j)) return;\r\nlet key=i+'-'+j;\r\n//console.log(key);\r\nif(!board[key]){\r\n    console.log('2222222222222222      '+key);\r\n    return;\r\n}\r\nboard[key].state=OBSTRUCTION;\r\nvisualQueue.push(key);\r\n//board[key].className='cssClasses.obstruction';\r\n}\r\n\r\nfunction randomNumber(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\n\r\nfunction getGrid(board)\r\n{\r\n    let grid,row;\r\n    grid=[];\r\n    for(var i=0;i<MAX_ROW;i++)\r\n    {\r\n        row=[]\r\n        for(var j=0;j<MAX_COLUMN;j++)\r\n        {\r\n            row.push(board[i+'-'+j]);\r\n        }\r\n        grid.push(row);\r\n    }\r\n    return grid;\r\n}\r\nfunction generateVisited(){\r\n    let visited,row;\r\n    visited=[];\r\n    for(var i=0;i<MAX_ROW;i++)\r\n    {\r\n        row=[]\r\n        for(var j=0;j<MAX_COLUMN;j++)\r\n        {\r\n            row.push(false);\r\n        }\r\n        visited.push(row);\r\n    }\r\n    return visited;    \r\n}\r\n","import { VISITED,OBSTRUCTION,UNVISITED, MAX_COLUMN,MAX_ROW } from './GRAPH_CONSTANTS';\r\nexport function recursiveMaze(board,src,dst)\r\n{\r\n    let strKey;\r\n    let currentCell,i,j,hashKey;\r\n    let queue=[];\r\n    let visualQueue=[];\r\n    // for(var x=0;x<MAX_ROW;x++) addToQueue(x,0,board,visualQueue);\r\n    // for(var y=0;y<MAX_COLUMN;y++) addToQueue(MAX_ROW-1,y,board,visualQueue);\r\n    // for(var x=MAX_ROW;x>=0;x--) addToQueue(x,MAX_COLUMN-1,board,visualQueue);\r\n    // for(var y=MAX_COLUMN-1;y>=0;y--) addToQueue(0,y,board,visualQueue);\r\n    for(var p=0;p<MAX_ROW;p++)\r\n    {\r\n        for(var q=0;q<MAX_COLUMN;q++)\r\n        {\r\n            if(p%2===0 && q%2===0)\r\n            {\r\n                strKey=p+'-'+q;\r\n                //if(src.key===strKey || dst.key===strKey) continue;\r\n                //board[strKey].state=OBSTRUCTION\r\n                //board[strKey].className='cssClasses.obstruction';\r\n                addToQueue(p,q,board,visualQueue,src,dst);\r\n            }\r\n        }\r\n    }    \r\n    generateMaze(board,visualQueue,src,dst);\r\n    let previous={};\r\n    let result=[];\r\n    let grid=getGrid(board);\r\n    let r=[1,0]; //x,y x-1,y x+1,y x,y-1 x,y+1\r\n    let c=[0,1];\r\n    result=[board,visualQueue,grid];\r\n    return result;\r\n}\r\nfunction addToQueue(i,j,board,visualQueue,src,dst)\r\n{\r\nlet key=i+'-'+j;\r\nif(key==src.key || key==dst.key) return;\r\nboard[key].state=OBSTRUCTION;\r\nvisualQueue.push(key);\r\n//board[key].className='cssClasses.obstruction';\r\n}\r\nfunction generateMaze(board,visualQueue,src,dst)\r\n{\r\nlet key,num;\r\nfor(var p=0;p<MAX_ROW;p++)\r\n{\r\n    for(var q=0;q<MAX_COLUMN;q++)\r\n    {\r\n        key=board[p+'-'+q];\r\n        if(src.key===key || dst.key===key) continue;\r\n        if(p%2==0 && q%2==0)\r\n        {\r\n            num=(Math.random()*10);\r\n            if(num>=5){\r\n                if(q+1<MAX_COLUMN) addToQueue(p,q+1,board,visualQueue,src,dst);\r\n                num=(Math.random()*10);\r\n                if(num>=5){\r\n                    if(p+1<MAX_ROW) addToQueue(p+1,q,board,visualQueue,src,dst);\r\n                }    \r\n            }\r\n            else\r\n            {\r\n                if(p+1<MAX_ROW) addToQueue(p+1,q,board,visualQueue,src,dst);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n}\r\n\r\nfunction getGrid(board)\r\n{\r\n    let grid,row;\r\n    grid=[];\r\n    for(var i=0;i<MAX_ROW;i++)\r\n    {\r\n        row=[]\r\n        for(var j=0;j<MAX_COLUMN;j++)\r\n        {\r\n            row.push(board[i+'-'+j]);\r\n        }\r\n        grid.push(row);\r\n    }\r\n    return grid;\r\n}","import { VISITED,OBSTRUCTION,UNVISITED, MAX_COLUMN,MAX_ROW, MAZE } from './GRAPH_CONSTANTS';\r\nexport function dfsMaze(board,src,dst)\r\n{\r\nlet grid=getGrid(board);\r\nlet visited=generateVisited();\r\nlet visualQueue;\r\n//visited[src.i][src.j]=true;\r\n//visited[dst.i][dst.j]=true;\r\nvisualQueue=dfs(board,MAZE.x,MAZE.y,visited,src,dst);\r\nlet result=[board,visualQueue,grid];\r\nreturn result;\r\n}\r\nfunction dfs(board,i,j,visited,src,dst)\r\n{\r\n    let visualQueue=[];\r\n    let stack=[];\r\n    stack.push([i,j]);\r\n    addToQueue(i,j,board,visualQueue,src,dst)\r\n    visited[i][j]=true;\r\n    let currentNode,steps,r,c,index,z,a,b;\r\n    while(stack.length!=0)\r\n    {\r\n        currentNode=stack.pop();\r\n        console.log('currentNode:',currentNode[0],currentNode[1]);\r\n        steps=[];\r\n        r=[-1,0,1,0];\r\n        c=[0,-1,0,1];\r\n        for(let x=0;x<r.length;x++) steps.push([r[x],c[x]]);\r\n        visit(board,currentNode[0],currentNode[1],steps,visualQueue,visited,src,dst);\r\n        index=0;\r\n        z=4;\r\n        console.log('traversing');\r\n        while(r.length>0)\r\n        {\r\n            index=(Math.floor(Math.random()*10))%z;\r\n            a=currentNode[0]+r[index]*2;\r\n            b=currentNode[1]+c[index]*2;\r\n            r.splice(index,1);\r\n            c.splice(index,1);\r\n            z--;\r\n            if(isValid(a,b,MAX_ROW,MAX_COLUMN) && visited[a][b]===false)\r\n            {\r\n                visited[a][b]=true;\r\n                stack.push([a,b]);\r\n            }\r\n        }\r\n    \r\n    }\r\n    return visualQueue;\r\n}\r\nfunction visit(board,i,j,steps,visualQueue,visited,src,dst){\r\n    let vi,vj,indexI,indexJ;\r\n    for(var q=0;q<steps.length;q++)\r\n    {\r\n\t\tindexI = i+steps[q][0];\r\n\t\tindexJ = j+steps[q][1];\r\n\t\tvi = i+steps[q][0]*2;\r\n\t\tvj = j+steps[q][1]*2;\r\n\t\tif(!isValid(indexI,indexJ,MAX_ROW,MAX_COLUMN)) continue;\r\n        if(isValid(vi,vj,MAX_ROW,MAX_COLUMN) && visited[vi][vj]===false)\r\n        {\r\n            addToQueue(indexI,indexJ,board,visualQueue,src,dst);\r\n            visited[indexI][indexJ]=true;\r\n            addToQueue(vi,vj,board,visualQueue,src,dst);\r\n        } \r\n    }\r\n}\r\n\r\nfunction isValid(i,j,maxR,maxC){\r\n\treturn (i>=0 && i<maxR && j>=0 && j<maxC);\r\n}\r\nfunction addToQueue(i,j,board,visualQueue,src,dst)\r\n{\r\nif((i==src.i && j==src.j) || (i==dst.i && j==dst.j)) return;\r\nlet key=i+'-'+j;\r\nboard[key].state=OBSTRUCTION;\r\nvisualQueue.push(key);\r\n//board[key].className='cssClasses.obstruction';\r\n}\r\nfunction getGrid(board)\r\n{\r\n    let grid,row;\r\n    grid=[];\r\n    for(var i=0;i<MAX_ROW;i++)\r\n    {\r\n        row=[]\r\n        for(var j=0;j<MAX_COLUMN;j++)\r\n        {\r\n            row.push(board[i+'-'+j]);\r\n        }\r\n        grid.push(row);\r\n    }\r\n    return grid;\r\n}\r\nfunction generateVisited(){\r\n    let visited,row;\r\n    visited=[];\r\n    for(var i=0;i<MAX_ROW;i++)\r\n    {\r\n        row=[]\r\n        for(var j=0;j<MAX_COLUMN;j++)\r\n        {\r\n            row.push(false);\r\n        }\r\n        visited.push(row);\r\n    }\r\n    return visited;    \r\n}\r\nfunction test(visited){\r\n    var x='';\r\n    for(var p=0;p<visited.length;p++)\r\n    {\r\n        for(var q=0;q<visited[p].length;q++) x+=visited[p][q]+' ';\r\n        x+='\\n';\r\n    }\r\n    document.getElementById('testingTextArea').value=document.getElementById('testingTextArea').value+'\\n\\n\\n'+x;\r\n}","import { VISITED,OBSTRUCTION,UNVISITED, MAX_COLUMN,MAX_ROW } from './GRAPH_CONSTANTS';\r\nexport function randomObstructionMaze(board,src,dst)\r\n{\r\n    let strKey;\r\n    let currentCell,i,j,hashKey;\r\n    let queue=[];\r\n    let visualQueue=[];\r\n    // for(var x=0;x<MAX_ROW;x++) addToQueue(x,0,board,visualQueue);\r\n    // for(var y=0;y<MAX_COLUMN;y++) addToQueue(MAX_ROW-1,y,board,visualQueue);\r\n    // for(var x=MAX_ROW;x>=0;x--) addToQueue(x,MAX_COLUMN-1,board,visualQueue);\r\n    // for(var y=MAX_COLUMN-1;y>=0;y--) addToQueue(0,y,board,visualQueue);\r\n    for(var p=0;p<MAX_ROW;p++)\r\n    {\r\n        for(var q=0;q<MAX_COLUMN;q++)\r\n        {\r\n            strKey=p+'-'+q;\r\n            //if(src.key===strKey || dst.key===strKey) continue;\r\n            //board[strKey].state=OBSTRUCTION\r\n            //board[strKey].className='cssClasses.obstruction';\r\n            if(Math.floor(Math.random()*10)%4==0) addToQueue(p,q,board,visualQueue,src,dst);\r\n        }\r\n    }    \r\n    let result=[];\r\n    let grid=getGrid(board);\r\n    let r=[1,0]; //x,y x-1,y x+1,y x,y-1 x,y+1\r\n    let c=[0,1];\r\n    result=[board,visualQueue,grid];\r\n    return result;\r\n}\r\nfunction addToQueue(i,j,board,visualQueue,src,dst)\r\n{\r\nlet key=i+'-'+j;\r\nif(key==src.key || key==dst.key) return;\r\nboard[key].state=OBSTRUCTION;\r\nvisualQueue.push(key);\r\n//board[key].className='cssClasses.obstruction';\r\n}\r\n\r\nfunction getGrid(board)\r\n{\r\n    let grid,row;\r\n    grid=[];\r\n    for(var i=0;i<MAX_ROW;i++)\r\n    {\r\n        row=[]\r\n        for(var j=0;j<MAX_COLUMN;j++)\r\n        {\r\n            row.push(board[i+'-'+j]);\r\n        }\r\n        grid.push(row);\r\n    }\r\n    return grid;\r\n}","import React, {Component} from 'react';\r\nimport cssClasses from './Grid.module.css';\r\nimport { UNVISITED,MAX_COLUMN,MAX_ROW } from './GRID_CONSTANTS';\r\nimport { OBSTRUCTION } from '../algorithms/GRAPH_CONSTANTS';\r\nexport function createBoard()\r\n{\r\n    let board=[];\r\n    let cells={};\r\n    let row,x;\r\n    for(let i=0;i<MAX_ROW;i++)\r\n    {\r\n        row=[];\r\n        for(let j=0;j<MAX_COLUMN;j++)\r\n        {\r\n            x={\r\n                i:i,\r\n                j:j,\r\n               state: UNVISITED,\r\n               key: i+'-'+j,\r\n               //className: 'cssClasses.unvisited'\r\n            };\r\n            cells[x.key]=x;\r\n            row.push(x);\r\n        }\r\n        board.push(row);\r\n    }\r\n    return [board,cells];\r\n}\r\n\r\nexport function createWeightBoard(){\r\n    let weightBoard=[];\r\n    let row,x;\r\n    for(let i=0;i<MAX_ROW;i++)\r\n    {\r\n        row=[];\r\n        for(let j=0;j<MAX_COLUMN;j++)\r\n        {\r\n            x=Math.floor(Math.random()*10)%10;\r\n            row.push(x);\r\n        }\r\n        weightBoard.push(row);\r\n    }\r\n    return weightBoard;\r\n\r\n}\r\nexport function createEmptyWeightBoard(){\r\n    let weightBoard=[];\r\n    let row,x;\r\n    for(let i=0;i<MAX_ROW;i++)\r\n    {\r\n        row=[];\r\n        for(let j=0;j<MAX_COLUMN;j++)\r\n        {\r\n            x=1;\r\n            row.push(x);\r\n        }\r\n        weightBoard.push(row);\r\n    }\r\n    return weightBoard;\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport function createClearedBoard(leaveObstruction,prevBoard){\r\n    let board=[];\r\n    let cells={};\r\n    let row,x;\r\n    for(let i=0;i<MAX_ROW;i++)\r\n    {\r\n        row=[];\r\n        for(let j=0;j<MAX_COLUMN;j++)\r\n        {\r\n            x={\r\n                i:i,\r\n                j:j,\r\n               state: (leaveObstruction && prevBoard[i][j].state===OBSTRUCTION)?OBSTRUCTION:UNVISITED,\r\n               key: i+'-'+j,\r\n               //className: 'cssClasses.unvisited'\r\n            };\r\n            cells[x.key]=x;\r\n            row.push(x);\r\n        }\r\n        board.push(row);\r\n    }\r\n    return [board,cells];\r\n}","import React, {Component} from 'react';\r\nimport cssClasses from './Grid.module.css';\r\nimport NavigationBar from '../NavigationBar/NavigationBar';\r\nimport Toolbar from '../Toolbar/Toolbar';\r\nimport Legend from '../Legend/Legend';\r\nimport { UNVISITED,VISITED,PATH,VISITING,OBSTRUCTION,MAX_COLUMN,MAX_ROW,startX,startY,endX,endY,MAZE_SPEED,SEARCH_SPEED } from './GRID_CONSTANTS';\r\nimport { breadthFirstSearch } from '../algorithms/bfs';\r\nimport { depthFirstSearch } from '../algorithms/dfs';\r\nimport { dijkstraSearch } from '../algorithms/dijkstraSearch';\r\nimport { bestFirstSearch } from '../algorithms/bestFirstSearch';\r\nimport { bestFirstSearchWeighted } from '../algorithms/bestFirstSearchWeighted';\r\nimport { recursiveDivisonMaze } from '../algorithms/recursiveDivisionMaze';\r\nimport { recursiveMaze } from '../algorithms/recursiveMaze';\r\nimport { dfsMaze } from '../algorithms/dfsMaze';\r\nimport { randomObstructionMaze } from '../algorithms/randomObstructionMaze';\r\nimport { createBoard,createWeightBoard,createEmptyWeightBoard } from './Helper';\r\nexport default class Grid extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={title: 'Dummy Algorithm',\r\n        currentAlgorithm:'',\r\n        disableAll:false,\r\n        currentAlgorithmKey:-1,\r\n        algorithms:['BFS','DFS','Swarm','Greedy BFS','A*','Dijkstra'],\r\n        algorithmFunctions:[this.bfs,this.dfs,this.swarm,this.greedyBFS,this.aStar,this.dijstra],\r\n        mazes:['Recursive Divison','DFS Maze','Random Connection','Random Obstruction'],\r\n        mazeFunctions:[this.getRecursiveDivisionMaze,this.getDFSMaze,this.getRecursiveMaze,this.getRandomObstructionMaze],\r\n        cellsLoaded:false,\r\n        weightsSet:false\r\n\r\n    };\r\n    }\r\n    componentDidMount(){\r\n        this.populateDS();\r\n    }\r\n    populateDS=()=>{\r\n        let result=createBoard();\r\n        let board,cells;\r\n        board=result[0];\r\n        cells=result[1];\r\n        // let src=board[startX][startY];\r\n        // let dst=board[endX][endY];\r\n        this.setState({\r\n            ...this.state,\r\n            grid:board,\r\n            cells:cells,\r\n            src:board[startY][startX],\r\n            dst:board[endY][endX]\r\n        },()=>{\r\n            this.setState({\r\n                ...this.state,\r\n                cellsLoaded:true,\r\n                cells:cells,\r\n                setters:{start:{x:this.state.src.i,y:this.state.src.j,settter:this.setSrc},end:{x:this.state.dst.i,y:this.state.dst.j,setter:this.setDst}}\r\n            });\r\n        });\r\n    }\r\n    tdClickHandler=(key)=>{\r\n        if(key===this.state.src.key || key===this.state.dst.key || this.state.disableAll==true) return;\r\n        let cellState=this.state.cells[key].state;\r\n        this.setState(prevState => {\r\n            let state = Object.assign({}, prevState);  // creating copy of state variable jasper\r\n                state.cells[key].state=cellState!==OBSTRUCTION?OBSTRUCTION:UNVISITED;                   // update the name property, assign a new value                 \r\n                //state.cells[key].className=cssClasses.obstruction;\r\n            return {state};\r\n        });\r\n        if(cellState!==OBSTRUCTION) document.getElementById(key).className=cssClasses.obstruction;\r\n        else document.getElementById(key).className=cssClasses.unvisited;\r\n    }\r\n    setSrc=(i,j)=>{\r\n        let prevKey=this.state.src.key;\r\n        if(this.state.grid[i][j].state===OBSTRUCTION)\r\n        {\r\n            alert('Cannot place Start here as there is an obstruction, please remove the obstruction first by clicking on the obstructed cell and try again');\r\n            return;\r\n        }\r\n        this.setState({\r\n            ...this.state,\r\n            src:this.state.cells[i+'-'+j],\r\n        });\r\n        this.clearBoardHandler(true);\r\n    }\r\n    setDst=(i,j)=>{\r\n        let prevKey=this.state.dst.key;\r\n        if(this.state.grid[i][j].state===OBSTRUCTION)\r\n        {\r\n            alert('Cannot place End here as there is an obstruction, please remove the obstruction first by clicking on the obstructed cell and try again');\r\n            return;\r\n        }\r\n        this.setState({dst:this.state.cells[i+'-'+j]});\r\n        this.clearBoardHandler(true);\r\n    }\r\n    componentWillReceiveProps(nextProps) {\r\n        console.log('^^^^^^^^^%^^^^^^^^^^^^^^^^^^^^^^^^^');\r\n        this.setState({title: nextProps.title})\r\n      }\r\n\r\n    render()\r\n    {\r\n        return (\r\n            <div>\r\n                <NavigationBar />\r\n        <div className=\"card card-block\">\r\n\r\n            {/* <h4 className=\"card-title\"><b>title</b></h4>\r\n\r\n            <p className=\"card-text\">Some quick example text to build on the card title and make up the bulk of the card's content.</p> */}\r\n            <Toolbar clear={this.clearBoardHandler} toggleWeights={this.toggleWeights} disableAll={this.state.disableAll} setStart={this.setSrc} setEnd={this.setDst} visualize={this.visualizeSelectedAlgorithmHandler} currentAlgorithm={this.state.currentAlgorithm} algorithms={this.state.algorithms} mazes={this.state.mazes} mazeHandler={this.selectMazeHandler} algorithmHandler={this.selectAlgorithmHandler} />\r\n            {/* <Legend /> */}\r\n\r\n            <div className=\"flex-row\">\r\n            <table align='center'>\r\n                <thead>\r\n                <tr>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {this.state.cellsLoaded?this.state.grid.map((row,rIndex)=>{\r\n                        return (\r\n                            <tr key={rIndex}>\r\n                            {row.map((cell,cIndex)=>{\r\n                                return (\r\n                                <td id={cell.key} key={cell.key} className={cell.state===UNVISITED?cssClasses.unvisited:cell.state===VISITED?cssClasses.visited:cell.state===OBSTRUCTION?cssClasses.obstruction:cell.state==PATH?cssClasses.path:null } onMouseDownCapture={this.tdClickHandler.bind(this,cell.key)}  onDrag={this.tdClickHandler.bind(this,cell.key)}>\r\n                                    {this.state.src.key===cell.key?<i className=\"fas fa-female\"></i>:this.state.dst.key===cell.key?<i className=\"fa fa-flag\"  aria-hidden=\"true\"></i>:this.state.weightsSet?this.state.weightBoard[rIndex][cIndex]:null}\r\n                                    </td>\r\n                                )\r\n                            })}\r\n\r\n                        </tr>\r\n                        );\r\n                    }):<tr><td>Loading</td></tr>}\r\n                </tbody>\r\n            </table>\r\n            <div>\r\n                <h1>Check out more projects on: <i className=\"fa fa-globe\" aria-hidden=\"true\"></i> <a href='https://adityavandan.github.io/'>adityavandan.github.io</a> </h1>\r\n                </div>\r\n            {/* <div>cfsd<button className=\"btn\" onClick={this.bfs}>Breadth First Search</button>\r\n            <button className='btn' onClick={this.clearBoardHandler.bind(this,false)}>clear</button>\r\n            <button className='btn' onClick={this.getRecursiveMaze}>recursiveMaze</button>\r\n            <button className='btn' onClick={this.getRandomObstructionMaze}>randomObstructionMaze</button>\r\n            <button className='btn' onClick={this.getDFSMaze}>DFSMaze</button>\r\n            <button className='btn' onClick={this.getRecursiveDivisionMaze}>recursiveDivisionMaze</button>\r\n            <button className='btn' onClick={this.dfs}>DFS</button>\r\n            <button className='btn' onClick={this.createWeights}>Set Weights</button>\r\n            <button className='btn' onClick={this.destroyWeights}>Remove Weights</button>\r\n            <button className='btn' onClick={this.dijstra}>dijkstra</button>\r\n            <button className='btn' onClick={this.swarm}>swarm</button>\r\n            <button className='btn' onClick={this.aStar}>A*</button>\r\n            <button className='btn' onClick={this.greedyBFS}>Greedy BFS</button>\r\n            <br></br>\r\n            <textarea id='testingTextArea'></textarea>\r\n                </div> */}\r\n            </div>\r\n        </div>   \r\n        </div>     \r\n        );\r\n    }\r\n\r\n    visualizeSelectedAlgorithmHandler=()=>{\r\n        if(this.state.currentAlgorithmKey==-1){\r\n            alert('please select an algorithm first');\r\n            return;\r\n        }\r\n        this.state.algorithmFunctions[this.state.currentAlgorithmKey]();\r\n    }\r\n    selectAlgorithmHandler=(key)=>{\r\n        //alert(key);\r\n        this.setState({\r\n            ...this.state,\r\n            currentAlgorithm:this.state.algorithms[key],\r\n            currentAlgorithmKey:key\r\n        });\r\n        \r\n    }\r\n    selectMazeHandler=(key)=>{\r\n        this.setState({\r\n            ...this.state,\r\n            currentMaze:this.state.mazes[key],\r\n            currentMazeKey:key\r\n        });\r\n        this.state.mazeFunctions[key]();\r\n    }\r\n    clearBoardHandler=(leaveObstruction)=>{\r\n        let key,grid,cells,row,x;\r\n        let board;\r\n        grid=[];\r\n        for(var i=0;i<MAX_ROW;i++)\r\n        {\r\n            row=[];\r\n            for(var j=0;j<MAX_COLUMN;j++)\r\n            {\r\n                document.getElementById(i+'-'+j).className=cssClasses.unvisited;\r\n                if(leaveObstruction)\r\n                {\r\n                    if(this.state.cells[i+'-'+j].state===OBSTRUCTION) \r\n                    {\r\n                        //console.log(i+'-'+j,'obstruction');\r\n                        this.setState(this.updateCellState(i+'-'+j,OBSTRUCTION,cssClasses.obstruction));\r\n                        document.getElementById(i+'-'+j).className=cssClasses.obstruction;\r\n                    }\r\n                    else \r\n                    {\r\n                        //console.log(i+'-'+j,'no-obstruction');\r\n                        this.setState(this.updateCellState(i+'-'+j,UNVISITED,cssClasses.unvisited));\r\n                    }\r\n                }\r\n                else this.setState(this.updateCellState(i+'-'+j,UNVISITED,cssClasses.unvisited));\r\n        \r\n            }\r\n        }\r\n        console.log(this.state);\r\n        }\r\n        updateCellState=(key,cellState,cssClass)=>{\r\n        return (prevState)=>{\r\n            let state = Object.assign({}, prevState);  // creating copy of state variable jasper\r\n            state.cells[key].state=cellState;                   // update the name property, assign a new value                 \r\n            //state.cells[key].className=cssClass;\r\n            return {state};\r\n            }\r\n        }\r\n        \r\n    getRecursiveMaze=()=>\r\n    {\r\n        this.setState({disableAll:true});\r\n        let currentCell;\r\n        let newBoard=createBoard();\r\n        this.clearBoardHandler(false);\r\n        let board=newBoard[1];\r\n        let result=recursiveMaze(board,this.state.src,this.state.dst);\r\n        board=result[0];\r\n        let visualQueue=result[1];\r\n        let grid=result[2];\r\n        var inter=setInterval(()=>{\r\n            if(visualQueue.length===0)\r\n            {\r\n               this.setState({\r\n                    ...this.state,\r\n                    cells:board,\r\n                    src:board[this.state.src.key],\r\n                    dst:board[this.state.dst.key],\r\n                    grid:grid,\r\n                    disableAll:false\r\n                },()=>{});\r\n                 \r\n                clearInterval(inter);\r\n            }\r\n            else{\r\n                currentCell=board[visualQueue.shift()];\r\n                //this.setState(updateState,afterUpdate);\r\n                document.getElementById(currentCell.key).className=cssClasses.obstruction;\r\n            }\r\n        },MAZE_SPEED);\r\n\r\n    }\r\n\r\n    getRandomObstructionMaze=()=>\r\n    {\r\n        this.setState({disableAll:true});\r\n        let currentCell;\r\n        let newBoard=createBoard();\r\n        this.clearBoardHandler(false);\r\n        let board=newBoard[1];\r\n        let result=randomObstructionMaze(board,this.state.src,this.state.dst);\r\n        board=result[0];\r\n        let visualQueue=result[1];\r\n        let grid=result[2];\r\n        var inter=setInterval(()=>{\r\n            if(visualQueue.length===0)\r\n            {\r\n               this.setState({\r\n                    ...this.state,\r\n                    cells:board,\r\n                    src:board[this.state.src.key],\r\n                    dst:board[this.state.dst.key],\r\n                    grid:grid,\r\n                    disableAll:false\r\n                },()=>{});\r\n                 \r\n                clearInterval(inter);\r\n            }\r\n            else{\r\n                currentCell=board[visualQueue.shift()];\r\n                //this.setState(updateState,afterUpdate);\r\n                document.getElementById(currentCell.key).className=cssClasses.obstruction;\r\n            }\r\n        },MAZE_SPEED);\r\n\r\n    }\r\n\r\n    getRecursiveDivisionMaze=()=>\r\n    {\r\n        this.setState({disableAll:true});\r\n        let currentCell;\r\n        let newBoard=createBoard();\r\n        this.clearBoardHandler(false);\r\n        let board=newBoard[1];\r\n        let result=recursiveDivisonMaze(board,this.state.src,this.state.dst);\r\n        board=result[0];\r\n        let visualQueue=result[1];\r\n        let grid=result[2];\r\n        var inter=setInterval(()=>{\r\n            if(visualQueue.length===0)\r\n            {\r\n               this.setState({\r\n                    ...this.state,\r\n                    cells:board,\r\n                    src:board[this.state.src.key],\r\n                    dst:board[this.state.dst.key],\r\n                    grid:grid,\r\n                    disableAll:false\r\n                },()=>{});\r\n                 \r\n                clearInterval(inter);\r\n            }\r\n            else{\r\n                currentCell=board[visualQueue.shift()];\r\n                //this.setState(updateState,afterUpdate);\r\n                document.getElementById(currentCell.key).className=cssClasses.obstruction;\r\n            }\r\n        },MAZE_SPEED);\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    getDFSMaze=()=>{\r\n        this.setState({disableAll:true});\r\n        let currentCell;\r\n        let newBoard=createBoard();\r\n        this.clearBoardHandler(false);\r\n        let board=newBoard[1];\r\n        let result=dfsMaze(board,this.state.src,this.state.dst);\r\n        board=result[0];\r\n        let visualQueue=result[1];\r\n        let grid=result[2];\r\n        var inter=setInterval(()=>{\r\n            if(visualQueue.length===0)\r\n            {\r\n               this.setState({\r\n                    ...this.state,\r\n                    cells:board,\r\n                    src:board[this.state.src.key],\r\n                    dst:board[this.state.dst.key],\r\n                    grid:grid,\r\n                    disableAll:false\r\n                },()=>{});\r\n                 \r\n                clearInterval(inter);\r\n            }\r\n            else{\r\n                currentCell=board[visualQueue.shift()];\r\n                //this.setState(updateState,afterUpdate);\r\n                document.getElementById(currentCell.key).className=cssClasses.obstruction;\r\n            }\r\n        },MAZE_SPEED);\r\n    }\r\n    bfs=()=>{\r\n        this.setState({disableAll:true});\r\n        this.clearBoardHandler(true);\r\n        let board=JSON.parse(JSON.stringify(this.state.cells));\r\n        let src=board[this.state.src.key];\r\n        let dst=board[this.state.dst.key];\r\n        let currentCell,visualQueue,path,grid;\r\n        let result=breadthFirstSearch(src,board,dst);\r\n        visualQueue=JSON.parse(JSON.stringify(result[0]));\r\n        path=JSON.parse(JSON.stringify(result[1]));\r\n        grid=JSON.parse(JSON.stringify(result[2]));\r\n        //let stateCells=visualQueue.concat(path);\r\n        let afterUpdate=()=>{\r\n        }\r\n        var inter=setInterval(()=>{\r\n            if(visualQueue.length===0 && path.length===0) \r\n            {\r\n                this.setState({disableAll:false});\r\n                clearInterval(inter);\r\n            }\r\n            else if(visualQueue.length!==0)\r\n            {\r\n                currentCell=board[visualQueue.shift()];\r\n                //this.setState(updateState,afterUpdate);\r\n                document.getElementById(currentCell.key).className=cssClasses.visited;\r\n            }\r\n            else\r\n            {\r\n                currentCell=board[path.pop()];\r\n                //this.setState(updateState,afterUpdate);\r\n                document.getElementById(currentCell.key).className=cssClasses.path;\r\n            }\r\n        },SEARCH_SPEED);\r\n    }\r\n\r\n    dfs=()=>{\r\n        this.setState({disableAll:true});\r\n        this.clearBoardHandler(true);\r\n        let board=JSON.parse(JSON.stringify(this.state.cells));\r\n        let src=board[this.state.src.key];\r\n        let dst=board[this.state.dst.key];\r\n        let currentCell,visualQueue,path,grid;\r\n        let result=depthFirstSearch(src,board,dst);\r\n        visualQueue=JSON.parse(JSON.stringify(result[0]));\r\n        path=JSON.parse(JSON.stringify(result[1]));\r\n        grid=JSON.parse(JSON.stringify(result[2]));\r\n        //let stateCells=visualQueue.concat(path);\r\n        let afterUpdate=()=>{\r\n        }\r\n        var inter=setInterval(()=>{\r\n            if(visualQueue.length===0 && path.length===0) \r\n            {\r\n                this.setState({disableAll:false});\r\n                clearInterval(inter);\r\n            }\r\n            else if(visualQueue.length!==0)\r\n            {\r\n                currentCell=board[visualQueue.shift()];\r\n                //this.setState(updateState,afterUpdate);\r\n                document.getElementById(currentCell.key).className=cssClasses.visited;\r\n            }\r\n            else\r\n            {\r\n                currentCell=board[path.pop()];\r\n                //this.setState(updateState,afterUpdate);\r\n                document.getElementById(currentCell.key).className=cssClasses.path;\r\n            }\r\n        },SEARCH_SPEED);\r\n    }\r\n    toggleWeights=()=>{\r\n        if(!this.state.weightsSet){\r\n            let weightBoard=createWeightBoard();\r\n            this.setState({\r\n                weightsSet:true,\r\n                weightBoard:weightBoard\r\n            });\r\n        }\r\n        else{\r\n            this.setState({\r\n                weightsSet:false,\r\n                weightBoard:null\r\n            });\r\n        }  \r\n    }\r\n    createWeights=()=>{\r\n        let weightBoard=createWeightBoard();\r\n        this.setState({\r\n            weightsSet:true,\r\n            weightBoard:weightBoard\r\n        });\r\n    }\r\n    destroyWeights=()=>{\r\n        this.setState({\r\n            weightsSet:false,\r\n            weightBoard:null\r\n        });\r\n    }\r\n    dijstra=()=>{\r\n        this.setState({disableAll:true});\r\n        this.clearBoardHandler(true);\r\n        let board=JSON.parse(JSON.stringify(this.state.cells));\r\n        let src=board[this.state.src.key];\r\n        let dst=board[this.state.dst.key];\r\n        let weights;\r\n        let currentCell,visualQueue,path,grid;\r\n        \r\n        let result;\r\n        if(this.state.weightsSet) weights=this.state.weightBoard;            \r\n        else weights=createEmptyWeightBoard();\r\n        result=dijkstraSearch(src,board,dst,weights);        \r\n        visualQueue=JSON.parse(JSON.stringify(result[0]));\r\n        path=JSON.parse(JSON.stringify(result[1]));\r\n        grid=JSON.parse(JSON.stringify(result[2]));\r\n        //let stateCells=visualQueue.concat(path);\r\n        let afterUpdate=()=>{\r\n        }\r\n        var inter=setInterval(()=>{\r\n            if(visualQueue.length===0 && path.length===0) \r\n            {\r\n                this.setState({disableAll:false});\r\n                clearInterval(inter);\r\n            }\r\n            else if(visualQueue.length!==0)\r\n            {\r\n                currentCell=board[visualQueue.shift()];\r\n                //this.setState(updateState,afterUpdate);\r\n                document.getElementById(currentCell.key).className=cssClasses.visited;\r\n            }\r\n            else\r\n            {\r\n                currentCell=board[path.pop()];\r\n                //this.setState(updateState,afterUpdate);\r\n                document.getElementById(currentCell.key).className=cssClasses.path;\r\n            }\r\n        },SEARCH_SPEED);\r\n    }\r\n    aStar=()=>{\r\n\r\n        this.setState({disableAll:true});\r\n        this.clearBoardHandler(true);\r\n        let board=JSON.parse(JSON.stringify(this.state.cells));\r\n        let src=board[this.state.src.key];\r\n        let dst=board[this.state.dst.key];\r\n        let currentCell,visualQueue,path,grid;\r\n        let heuristic,row;\r\n        let result;\r\n        heuristic=[];\r\n        for(var r=0;r<MAX_ROW;r++){\r\n            row=[];            //f(a)=g(a)+h(a)  //destination heuristics                    //source heuristics \r\n            for(var c=0;c<MAX_COLUMN;c++) row.push(Math.abs(r-dst.i)+Math.abs(c-dst.j)         +Math.abs(r-src.i)+Math.abs(c-src.j)/2        ); //manhatten distance\r\n            heuristic.push(row);\r\n        }\r\n        if(this.state.weightsSet)\r\n        {\r\n            let weights=this.state.weightBoard\r\n            result=bestFirstSearchWeighted(src,board,dst,heuristic,weights);\r\n        }\r\n        else result=bestFirstSearch(src,board,dst,heuristic);\r\n\r\n        visualQueue=JSON.parse(JSON.stringify(result[0]));\r\n        path=JSON.parse(JSON.stringify(result[1]));\r\n        grid=JSON.parse(JSON.stringify(result[2]));\r\n        //let stateCells=visualQueue.concat(path);\r\n        let afterUpdate=()=>{\r\n        }\r\n        var inter=setInterval(()=>{\r\n            if(visualQueue.length===0 && path.length===0) \r\n            {\r\n                this.setState({disableAll:false});\r\n                clearInterval(inter);\r\n            }\r\n            else if(visualQueue.length!==0)\r\n            {\r\n                currentCell=board[visualQueue.shift()];\r\n                //this.setState(updateState,afterUpdate);\r\n                document.getElementById(currentCell.key).className=cssClasses.visited;\r\n            }\r\n            else\r\n            {\r\n                currentCell=board[path.pop()];\r\n                //this.setState(updateState,afterUpdate);\r\n                document.getElementById(currentCell.key).className=cssClasses.path;\r\n            }\r\n        },SEARCH_SPEED);\r\n    }\r\n    greedyBFS=()=>{\r\n\r\n        this.setState({disableAll:true});\r\n        this.clearBoardHandler(true);\r\n        let board=JSON.parse(JSON.stringify(this.state.cells));\r\n        let src=board[this.state.src.key];\r\n        let dst=board[this.state.dst.key];\r\n        let currentCell,visualQueue,path,grid;\r\n        let result;\r\n        let heuristic,row;\r\n        heuristic=[];\r\n        for(var r=0;r<MAX_ROW;r++){\r\n            row=[];\r\n            for(var c=0;c<MAX_COLUMN;c++){ //f(a)=h(a)\r\n                row.push(Math.abs(r-dst.i)+Math.abs(c-dst.j)); //manhatten distance\r\n            }\r\n            heuristic.push(row);\r\n        }\r\n        if(this.state.weightsSet){\r\n            let weights=this.state.weightBoard\r\n            result=bestFirstSearchWeighted(src,board,dst,heuristic,weights);\r\n        }\r\n        else result=bestFirstSearch(src,board,dst,heuristic);\r\n        visualQueue=JSON.parse(JSON.stringify(result[0]));\r\n        path=JSON.parse(JSON.stringify(result[1]));\r\n        grid=JSON.parse(JSON.stringify(result[2]));\r\n        //let stateCells=visualQueue.concat(path);\r\n        let afterUpdate=()=>{\r\n        }\r\n        var inter=setInterval(()=>{\r\n            if(visualQueue.length===0 && path.length===0) \r\n            {\r\n                this.setState({disableAll:false});\r\n                clearInterval(inter);\r\n            }\r\n            else if(visualQueue.length!==0)\r\n            {\r\n                currentCell=board[visualQueue.shift()];\r\n                //this.setState(updateState,afterUpdate);\r\n                document.getElementById(currentCell.key).className=cssClasses.visited;\r\n            }\r\n            else\r\n            {\r\n                currentCell=board[path.pop()];\r\n                //this.setState(updateState,afterUpdate);\r\n                document.getElementById(currentCell.key).className=cssClasses.path;\r\n            }\r\n        },SEARCH_SPEED);\r\n\r\n    }\r\n\r\n    swarm=()=>{\r\n\r\n        this.setState({disableAll:true});\r\n        this.clearBoardHandler(true);\r\n        let board=JSON.parse(JSON.stringify(this.state.cells));\r\n        let src=board[this.state.src.key];\r\n        let dst=board[this.state.dst.key];\r\n        let currentCell,visualQueue,path,grid;\r\n        let heuristic,row;\r\n        let result;\r\n        heuristic=[];\r\n        for(var r=0;r<MAX_ROW;r++){\r\n            row=[];            //f(a)=g(a)+h(a)  //destination heuristics                    //source heuristics \r\n            for(var c=0;c<MAX_COLUMN;c++) row.push(Math.abs(r-dst.i)+Math.abs(c-dst.j)         +Math.abs(r-src.i)+Math.abs(c-src.j)/2        ); //manhatten distance\r\n            heuristic.push(row);\r\n        }\r\n        if(this.state.weightsSet)\r\n        {\r\n            let weights=this.state.weightBoard;\r\n            for(var r=0;r<MAX_ROW;r++){\r\n                //row=[];            //f(a)=g(a)+h(a)  //destination heuristics                    //source heuristics \r\n                for(var c=0;c<MAX_COLUMN;c++) heuristic[r][c]+=weights[r][c]; //manhatten distance\r\n                //heuristic.push(row);\r\n            }    \r\n            result=dijkstraSearch(src,board,dst,heuristic);\r\n        }\r\n        else result=dijkstraSearch(src,board,dst,heuristic);\r\n\r\n        visualQueue=JSON.parse(JSON.stringify(result[0]));\r\n        path=JSON.parse(JSON.stringify(result[1]));\r\n        grid=JSON.parse(JSON.stringify(result[2]));\r\n        //let stateCells=visualQueue.concat(path);\r\n        let afterUpdate=()=>{\r\n        }\r\n        var inter=setInterval(()=>{\r\n            if(visualQueue.length===0 && path.length===0) \r\n            {\r\n                this.setState({disableAll:false});\r\n                clearInterval(inter);\r\n            }\r\n            else if(visualQueue.length!==0)\r\n            {\r\n                currentCell=board[visualQueue.shift()];\r\n                //this.setState(updateState,afterUpdate);\r\n                document.getElementById(currentCell.key).className=cssClasses.visited;\r\n            }\r\n            else\r\n            {\r\n                currentCell=board[path.pop()];\r\n                //this.setState(updateState,afterUpdate);\r\n                document.getElementById(currentCell.key).className=cssClasses.path;\r\n            }\r\n        },SEARCH_SPEED);\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n}","import { VISITED,OBSTRUCTION,UNVISITED,PATH, MAX_COLUMN, MAX_ROW } from './GRAPH_CONSTANTS';\r\nimport { getGrid } from './Utility/utility';\r\nexport function depthFirstSearch(src,board,dst)\r\n{\r\n    console.log('src',src);\r\n    console.log('dst',dst);\r\n    console.log('board',board);\r\n    let currentCell,i,j,hashKey;\r\n    let stack=[];\r\n    let visualQueue=[];\r\n    let previous={};\r\n    let result=[];\r\n    let r=[-1,0,1,0]; //x,y x-1,y x+1,y x,y-1 x,y+1\r\n    let c=[0,-1,0,1];\r\n    console.log('src:',src);\r\n    console.log('dst:',dst);\r\n    console.log('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%')\r\n    stack.push(src);\r\n\r\n    while(stack.length!=0)\r\n    {\r\n        currentCell=stack.pop();\r\n        if(currentCell.state===VISITED) continue;\r\n        if(currentCell.key===dst.key)\r\n        {\r\n            visualQueue.push(currentCell.key);\r\n            currentCell.state=VISITED;\r\n            break;\r\n        }\r\n        currentCell.state=VISITED;\r\n        //currentCell.className=cssClasses.visited;\r\n        visualQueue.push(currentCell.key);\r\n        for(let a=0;a<r.length;a++) //or c.length\r\n        {\r\n            i=currentCell.i+r[a];\r\n            j=currentCell.j+c[a];\r\n            hashKey=i+'-'+j;\r\n            if(board[hashKey] && board[hashKey].state===UNVISITED)\r\n            {\r\n                stack.push(board[hashKey]);\r\n                previous[hashKey]=currentCell.i+'-'+currentCell.j;\r\n            }\r\n        }\r\n    }\r\n    let node=dst.key;\r\n    let path=[];\r\n    while(1)\r\n    {\r\n        if(node)\r\n        {\r\n            path.push(node);\r\n            board[node].state=PATH;\r\n            node=previous[node];\r\n            console.log(node);\r\n            if(node===src.key)\r\n            {\r\n                path.push(node);\r\n                board[node].state=PATH;\r\n                break;\r\n            }\r\n        }\r\n        else break;\r\n    }\r\n    let grid=getGrid(board);\r\n    result=[visualQueue,path,grid];\r\n    console.log('path',path);\r\n    console.log('visualQueue',visualQueue);\r\n    return result;\r\n\r\n\r\n    \r\n\r\n\r\n\r\n\r\n}\r\n","import React, {Component} from 'react';\r\nimport Toolbar from './Toolbar/Toolbar'\r\nimport Grid from './Grid/Grid';\r\nexport default class Visualizer extends Component{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state={\r\n            currentAlgorithm:'',\r\n            currentAlgrithmKey:-1,\r\n            algorithms:['Breadth-First-Search','Depth-First-Search','Dijkstra'],\r\n            mazes:['A','B','C']                \r\n        };\r\n    }\r\n    render()\r\n    {\r\n        return (\r\n            <div>\r\n                <Grid />\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Visualizer from './Visualizer/Toolbar/Toolbar'\nimport Toolbar from './Visualizer/Visualizer';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Toolbar />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}